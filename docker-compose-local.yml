services:
  # ===========================================
  # CORE APPLICATION SERVICES
  # ===========================================
  
  # Main Backend API
  backend:
    image: docker.io/fluentlyorg/fluently-backend:latest-develop
    # build:
    #   context: ./backend
    #   dockerfile: Dockerfile
    container_name: fluently_backend
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      ml-api:
        condition: service_healthy
      redis:
        condition: service_healthy
      thesaurus-api:
        condition: service_healthy
      llm-api:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - fluently_network
    ports:
      - "127.0.0.1:8070:8070"  # Local access for docker services

  # ===========================================
  # DATABASE SERVICES
  # ===========================================
  
  # Main PostgreSQL Database
  postgres:
    image: postgres:latest
    container_name: fluently_postgres
    env_file: .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      # - fluently_pgdata:/var/lib/postgresql/data/pgdata
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    networks:
      - fluently_network 
    ports:
      - "127.0.0.1:5432:5432"  # Local access for docker services

  # Redis for Telegram Bot and Directus
  redis:
    image: redis:7-alpine
    container_name: fluently_redis
    restart: unless-stopped
    volumes:
      - fluently_redis_data:/data
    networks:
      - fluently_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s
    # No external ports - internal communication only

  # ===========================================
  # APPLICATION SERVICES
  # ===========================================
  
  # Telegram Bot
  telegram-bot:
    image: docker.io/fluentlyorg/fluently-telegram-bot:latest-develop
    container_name: fluently_telegram_bot
    restart: unless-stopped
    env_file: .env  # Use root .env file instead of telegram-bot/.env
    environment:
      # Override Redis connection for Docker network
      - REDIS_ADDR=redis:6379
      - WEBHOOK_HOST=0.0.0.0
      - WEBHOOK_PORT=8060
      - WEBHOOK_PATH=/webhook
    depends_on:
      - redis
      - backend
    networks:
      - fluently_network
    # Bot webhook endpoint for NGINX to proxy to
    ports:
      - "127.0.0.1:8060:8060"  # Local access for NGINX proxy

  # ML Distractor API (Internal only)
  ml-api:
    image: docker.io/fluentlyorg/fluently-ml-api:latest-develop
    container_name: fluently_ml_api
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    volumes:
      # Shared model cache
      - fluently_model_cache:/app/.cache/huggingface
      # Service-specific logs
      - ./analysis/distractor_api/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 5s
      timeout: 5s
      retries: 25
      start_period: 5s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    networks:
      - fluently_network
    ports:
      - "127.0.0.1:8001:8001"  # Local access for debugging

  # Thesaurus API for vocabulary recommendations (Built from Dockerfile)
  thesaurus-api:
    build:
      context: ./analysis/thesaurus
      dockerfile: Dockerfile
    container_name: fluently_thesaurus
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - THESAURUS_ALLOWED_ORIGINS=${THESAURUS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8070}
    env_file: .env  # Use root .env file
    volumes:
      # Mount the thesaurus data file
      - ./analysis/thesaurus/result.csv:/app/result.csv:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health", "-d", '{"ping":"test"}', "-H", "Content-Type: application/json"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    networks:
      - fluently_network
    ports:
      - "127.0.0.1:8002:8002"  # Local access for debugging

  # LLM API for AI-powered conversations (Built from Dockerfile)
  llm-api:
    build:
      context: ./analysis/llms
      dockerfile: Dockerfile
    container_name: fluently_llm_api
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
    env_file: .env  # Use root .env file
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    networks:
      - fluently_network
    ports:
      - "127.0.0.1:8003:8003"  # Local access for debugging


  # ===========================================
  # ADMIN & MANAGEMENT
  # ===========================================
  
  # Directus CMS
  directus:
    image: directus/directus:latest
    container_name: fluently_directus
    restart: unless-stopped
    env_file: .env
    environment:
      SECRET: ${DIRECTUS_SECRET_KEY}
      KEY: ${DIRECTUS_SECRET_KEY}
      ADMIN_EMAIL: ${DIRECTUS_ADMIN_EMAIL}
      ADMIN_PASSWORD: ${DIRECTUS_ADMIN_PASSWORD}
      DB_CLIENT: pg
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      PORT: 8055
      # Redis configuration for Docker network
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fluently_network
    ports:
      - "127.0.0.1:8055:8055"  # Local access for nginx

  # ===========================================
  # TESTING SERVICES
  # ===========================================

  # Test Database
  test_db:
    image: postgres:15
    container_name: fluently_test_db
    environment:
      POSTGRES_DB:       test_db
      POSTGRES_USER:     test_user
      POSTGRES_PASSWORD: test_pass
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - fluently_network

# ===========================================
# VOLUMES
# ===========================================

volumes:
  fluently_pgdata:
    name: fluently_pgdata_safe
  fluently_model_cache:
    name: fluently_model_cache_safe
  fluently_redis_data:
    name: fluently_redis_data_safe
  test_pgdata:
    name: test_pgdata_safe
# ===========================================
# NETWORKS
# ===========================================

networks:
  fluently_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
  test_network:
    driver: bridge