package handlers

import (
	"crypto/rand"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"time"

	"fluently/go-backend/internal/config"
	"fluently/go-backend/internal/repository/models"
	"fluently/go-backend/internal/repository/postgres"
	"fluently/go-backend/internal/repository/schemas"
	"fluently/go-backend/pkg/logger"

	"go.uber.org/zap"
	"google.golang.org/api/idtoken"
	"gorm.io/gorm"
)

type TelegramHandler struct {
	UserRepo      *postgres.UserRepository
	LinkTokenRepo *postgres.LinkTokenRepository
}

// generateLinkToken –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
func generateLinkToken() (string, error) {
	b := make([]byte, 32)
	if _, err := rand.Read(b); err != nil {
		return "", err
	}
	return base64.URLEncoding.EncodeToString(b), nil
}

// CreateLinkToken godoc
// @Summary      –°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è Telegram –∞–∫–∫–∞—É–Ω—Ç–∞
// @Description  –°–æ–∑–¥–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è Telegram ID —Å Google –∞–∫–∫–∞—É–Ω—Ç–æ–º
// @Tags         telegram
// @Accept       json
// @Produce      json
// @Param        request  body      schemas.TelegramLinkRequest  true  "Telegram ID"
// @Success      200  {object}  schemas.TelegramLinkResponse
// @Failure      400  {object}  schemas.ErrorResponse
// @Failure      409  {object}  schemas.ErrorResponse
// @Failure      500  {object}  schemas.ErrorResponse
// @Router       /api/v1/telegram/create-link [post]
func (h *TelegramHandler) CreateLinkToken(w http.ResponseWriter, r *http.Request) {
	var req schemas.TelegramLinkRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		logger.Log.Error("Invalid request body", zap.Error(err))
		http.Error(w, "invalid request body", http.StatusBadRequest)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç Telegram ID
	if _, err := h.UserRepo.GetByTelegramID(r.Context(), req.TelegramID); err == nil {
		logger.Log.Warn("Telegram ID already linked", zap.Int64("telegram_id", req.TelegramID))
		http.Error(w, "telegram account already linked", http.StatusConflict)
		return
	}

	// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ Telegram ID
	if existingTokens, err := h.LinkTokenRepo.GetActiveTelegramTokens(r.Context(), req.TelegramID); err == nil {
		for _, token := range existingTokens {
			h.LinkTokenRepo.MarkAsUsed(r.Context(), token.ID)
		}
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
	token, err := generateLinkToken()
	if err != nil {
		logger.Log.Error("Failed to generate link token", zap.Error(err))
		http.Error(w, "failed to generate token", http.StatusInternalServerError)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞
	linkToken := &models.LinkToken{
		Token:      token,
		TelegramID: req.TelegramID,
		Used:       false,
		ExpiresAt:  time.Now().Add(15 * time.Minute), // 15 –º–∏–Ω—É—Ç –Ω–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
	}

	if err := h.LinkTokenRepo.Create(r.Context(), linkToken); err != nil {
		logger.Log.Error("Failed to create link token", zap.Error(err))
		http.Error(w, "failed to create link token", http.StatusInternalServerError)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	cfg := config.GetConfig()
	linkURL := fmt.Sprintf("https://%s/link-google?token=%s", cfg.API.AppHost, token)

	resp := schemas.TelegramLinkResponse{
		Token:     token,
		LinkURL:   linkURL,
		ExpiresAt: linkToken.ExpiresAt.Format(time.RFC3339),
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(resp)
}

// CheckLinkStatus godoc
// @Summary      –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–≤—è–∑—ã–≤–∞–Ω–∏—è Telegram –∞–∫–∫–∞—É–Ω—Ç–∞
// @Description  –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤—è–∑–∞–Ω –ª–∏ Telegram ID —Å –∫–∞–∫–∏–º-–ª–∏–±–æ –∞–∫–∫–∞—É–Ω—Ç–æ–º
// @Tags         telegram
// @Accept       json
// @Produce      json
// @Param        request  body      schemas.TelegramLinkStatusRequest  true  "Telegram ID"
// @Success      200  {object}  schemas.TelegramLinkStatusResponse
// @Failure      400  {object}  schemas.ErrorResponse
// @Failure      500  {object}  schemas.ErrorResponse
// @Router       /api/v1/telegram/check-status [post]
func (h *TelegramHandler) CheckLinkStatus(w http.ResponseWriter, r *http.Request) {
	var req schemas.TelegramLinkStatusRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "invalid request body", http.StatusBadRequest)
		return
	}

	user, err := h.UserRepo.GetByTelegramID(r.Context(), req.TelegramID)
	var resp schemas.TelegramLinkStatusResponse

	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			resp = schemas.TelegramLinkStatusResponse{
				IsLinked: false,
				Message:  "Telegram account not linked",
			}
		} else {
			logger.Log.Error("Failed to check telegram status", zap.Error(err))
			http.Error(w, "internal server error", http.StatusInternalServerError)
			return
		}
	} else {
		resp = schemas.TelegramLinkStatusResponse{
			IsLinked: true,
			User: &schemas.UserBasic{
				ID:    user.ID.String(),
				Name:  user.Name,
				Email: user.Email,
			},
			Message: "Telegram account successfully linked",
		}
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(resp)
}

// LinkWithGoogle godoc
// @Summary      –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ Google OAuth
// @Description  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç Telegram ID —Å Google –∞–∫–∫–∞—É–Ω—Ç–æ–º
// @Tags         telegram
// @Accept       json
// @Produce      json
// @Param        token   query      string  true  "Link token"
// @Success      200  {object}  map[string]string
// @Failure      400  {object}  schemas.ErrorResponse
// @Failure      401  {object}  schemas.ErrorResponse
// @Failure      410  {object}  schemas.ErrorResponse
// @Failure      500  {object}  schemas.ErrorResponse
// @Router       /link-google [get]
func (h *TelegramHandler) LinkWithGoogle(w http.ResponseWriter, r *http.Request) {
	token := r.URL.Query().Get("token")
	if token == "" {
		http.Error(w, "token parameter required", http.StatusBadRequest)
		return
	}

	// –ù–∞—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω
	linkToken, err := h.LinkTokenRepo.GetByToken(r.Context(), token)
	if err != nil {
		logger.Log.Error("Link token not found", zap.Error(err))
		http.Error(w, "invalid or expired token", http.StatusGone)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
	if linkToken.Used || linkToken.ExpiresAt.Before(time.Now()) {
		logger.Log.Warn("Link token expired or used",
			zap.Bool("used", linkToken.Used),
			zap.Time("expires_at", linkToken.ExpiresAt))
		http.Error(w, "token expired or already used", http.StatusGone)
		return
	}

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Google OAuth
	// —Ç–æ —Å–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç —Å Telegram ID

	// –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Google OAuth

	// –ü—Ä–∏–º–µ—Ä HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	html := `
<!DOCTYPE html>
<html>
<head>
    <title>–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        .container { max-width: 400px; margin: 0 auto; }
        .btn { background: #4285f4; color: white; padding: 12px 24px; 
               text-decoration: none; border-radius: 4px; display: inline-block; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤</h1>
        <p>–î–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ —Å Google, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É:</p>
        <a href="/auth/google?redirect_uri=%s&state=%s" class="btn">
            –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google
        </a>
    </div>
</body>
</html>`

	// –§–æ—Ä–º–∏—Ä—É–µ–º redirect_uri –∏ state
	scheme := r.Header.Get("X-Forwarded-Proto")
	if scheme == "" {
		if r.TLS != nil {
			scheme = "https"
		} else {
			scheme = "http"
		}
	}
	redirectURI := fmt.Sprintf("%s://%s/link-google/callback?token=%s", scheme, r.Host, token)
	state := token // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ state

	w.Header().Set("Content-Type", "text/html")
	fmt.Fprintf(w, html, redirectURI, state)
}

// LinkGoogleCallback godoc
// @Summary      Callback –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Google
// @Description  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –æ—Ç Google OAuth –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
// @Tags         telegram
// @Accept       json
// @Produce      json
// @Param        token   query      string  true  "Link token"
// @Param        code    query      string  true  "OAuth code"
// @Param        state   query      string  true  "OAuth state"
// @Success      200  {object}  map[string]string
// @Failure      400  {object}  schemas.ErrorResponse
// @Failure      500  {object}  schemas.ErrorResponse
// @Router       /link-google/callback [get]
func (h *TelegramHandler) LinkGoogleCallback(w http.ResponseWriter, r *http.Request) {
	token := r.URL.Query().Get("token")
	code := r.URL.Query().Get("code")
	state := r.URL.Query().Get("state")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	if token == "" || code == "" || state != token {
		http.Error(w, "invalid parameters", http.StatusBadRequest)
		return
	}

	// –ù–∞—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
	linkToken, err := h.LinkTokenRepo.GetByToken(r.Context(), token)
	if err != nil || linkToken.Used || linkToken.ExpiresAt.Before(time.Now()) {
		http.Error(w, "invalid or expired token", http.StatusGone)
		return
	}

	// –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å Google OAuth –∫–æ–¥ –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –∏–∑ auth_handler.go
	cfg := config.GetConfig()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º OAuth config –¥–ª—è callback
	oauthCfg := config.GoogleOAuthConfig()
	scheme := r.Header.Get("X-Forwarded-Proto")
	if scheme == "" {
		if r.TLS != nil {
			scheme = "https"
		} else {
			scheme = "http"
		}
	}
	oauthCfg.RedirectURL = fmt.Sprintf("%s://%s/link-google/callback", scheme, r.Host)

	// –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω
	oauthToken, err := oauthCfg.Exchange(r.Context(), code)
	if err != nil {
		logger.Log.Error("OAuth code exchange failed", zap.Error(err))
		http.Error(w, "authorization failed", http.StatusUnauthorized)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–∫–µ–Ω
	rawIDToken, ok := oauthToken.Extra("id_token").(string)
	if !ok {
		logger.Log.Error("ID token missing in OAuth response")
		http.Error(w, "authorization failed", http.StatusInternalServerError)
		return
	}

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º ID —Ç–æ–∫–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É)
	audiences := []string{
		cfg.Google.WebClientID,
		fmt.Sprintf("%s.apps.googleusercontent.com", cfg.Google.IosClientID),
		fmt.Sprintf("%s.apps.googleusercontent.com", cfg.Google.AndroidClientID),
	}

	var payload *idtoken.Payload
	for _, aud := range audiences {
		payload, err = idtoken.Validate(r.Context(), rawIDToken, aud)
		if err == nil {
			break
		}
	}
	if err != nil {
		logger.Log.Error("Invalid ID token", zap.Error(err))
		http.Error(w, "authorization failed", http.StatusUnauthorized)
		return
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	claims := payload.Claims
	userEmail := claims["email"].(string)
	emailVerified := claims["email_verified"].(bool)

	if !emailVerified {
		logger.Log.Error("Email not verified", zap.String("email", userEmail))
		http.Error(w, "email not verified", http.StatusBadRequest)
		return
	}

	// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
	user, err := h.UserRepo.GetByEmail(r.Context(), userEmail)
	if err != nil {
		logger.Log.Error("User not found", zap.Error(err))
		http.Error(w, "user not found", http.StatusNotFound)
		return
	}

	// –°–≤—è–∑—ã–≤–∞–µ–º Telegram ID —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
	if err := h.UserRepo.LinkTelegramID(r.Context(), user.ID, linkToken.TelegramID); err != nil {
		logger.Log.Error("Failed to link telegram ID", zap.Error(err))
		http.Error(w, "failed to link account", http.StatusInternalServerError)
		return
	}

	// –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
	if err := h.LinkTokenRepo.MarkAsUsed(r.Context(), linkToken.ID); err != nil {
		logger.Log.Error("Failed to mark token as used", zap.Error(err))
	}

	// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞
	html := `
<!DOCTYPE html>
<html>
<head>
    <title>–£—Å–ø–µ—à–Ω–æ!</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
        .container { max-width: 400px; margin: 0 auto; }
        .success { color: #28a745; }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="success">‚úÖ –ì–æ—Ç–æ–≤–æ!</h1>
        <p>–í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å Google –∞–∫–∫–∞—É–Ω—Ç–æ–º.</p>
        <p>–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Telegram –±–æ—Ç.</p>
    </div>
</body>
</html>`

	w.Header().Set("Content-Type", "text/html")
	fmt.Fprint(w, html)
}

// UnlinkTelegram godoc
// @Summary      –û—Ç–≤—è–∑–∞—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç
// @Description  –£–¥–∞–ª—è–µ—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É Telegram ID –∏ –∞–∫–∫–∞—É–Ω—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Tags         telegram
// @Accept       json
// @Produce      json
// @Security     BearerAuth
// @Param        request  body      schemas.TelegramUnlinkRequest  true  "Telegram ID"
// @Success      200  {object}  map[string]string
// @Failure      400  {object}  schemas.ErrorResponse
// @Failure      404  {object}  schemas.ErrorResponse
// @Failure      500  {object}  schemas.ErrorResponse
// @Router       /api/v1/telegram/unlink [post]
func (h *TelegramHandler) UnlinkTelegram(w http.ResponseWriter, r *http.Request) {
	var req schemas.TelegramUnlinkRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "invalid request body", http.StatusBadRequest)
		return
	}

	// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
	user, err := h.UserRepo.GetByTelegramID(r.Context(), req.TelegramID)
	if err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			http.Error(w, "telegram account not linked", http.StatusNotFound)
			return
		}
		logger.Log.Error("Failed to find user", zap.Error(err))
		http.Error(w, "internal server error", http.StatusInternalServerError)
		return
	}

	// –û—Ç–≤—è–∑—ã–≤–∞–µ–º Telegram ID
	if err := h.UserRepo.UnlinkTelegramID(r.Context(), user.ID); err != nil {
		logger.Log.Error("Failed to unlink telegram", zap.Error(err))
		http.Error(w, "failed to unlink account", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{
		"message": "Telegram account successfully unlinked",
	})
}
