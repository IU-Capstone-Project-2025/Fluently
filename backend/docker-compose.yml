services:
  # app:
    #   build: .
    #   container_name: fluently_bot
    #   env_file: .env
    #   environment:
    #     BOT_TOKEN: ${BOT_TOKEN}
    #   ports:
    #     - "${APP_PORT}:${APP_PORT}"
    #   depends_on:
    #     - redis
    #     - postgres
    #   restart: unless-stopped

    # worker:
    #   build: .
    #   container_name: fluently_worker
    #   command: poetry run celery -A telegram.celery_app worker --loglevel=info
    #   env_file: .env
    #   depends_on:
    #     - redis
    #     - postgres
    #   restart: unless-stopped

    # redis:
    #   image: redis:7
    #   # container_name: fluently_redis
    #   ports:
    #     - "6380:6379"
    #   restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fluently_app
    env_file: .env 
    ports:
      - "${APP_PORT:-8080}:${APP_PORT:-8080}"
    depends_on:
      postgres:
        condition: service_healthy 
    restart: unless-stopped
    networks:
      - fluently_network

  nginx:
    build:
<<<<<<< HEAD
      context: ..
      dockerfile: backend/nginx-container/Dockerfile
=======
      context: .
      dockerfile: swagger/Dockerfile
>>>>>>> upstream/main
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
    volumes:
<<<<<<< HEAD
      - ./nginx-container/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx-container/nginx-headers.conf:/etc/nginx/nginx-headers.conf:ro
=======
>>>>>>> upstream/main
      - /etc/letsencrypt:/etc/letsencrypt
      - ./letsencrypt/webroot:/var/www/certbot
      - ../frontend-website:/usr/share/nginx/html/main-site
    networks:
      - fluently_network

  postgres:
    image: postgres:latest
    container_name: fluently_db
    env_file: .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
        - fluently_network 

  directus:
    image: directus/directus:latest
    container_name: fluently_directus
    restart: unless-stopped
    ports:
      - "${DIRECTUS_PORT:-8055}:${DIRECTUS_PORT:-8055}"
    env_file: .env
    environment:
      SECRET: ${DIRECTUS_SECRET_KEY}
      KEY: ${DIRECTUS_SECRET_KEY}
      ADMIN_EMAIL: ${DIRECTUS_ADMIN_EMAIL}
      ADMIN_PASSWORD: ${DIRECTUS_ADMIN_PASSWORD}
      PUBLIC_URL: ${PUBLIC_URL:-https://admin.fluently-app.ru}
      DB_CLIENT: pg
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      PORT: ${DIRECTUS_PORT:-8055}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fluently_network

volumes:
  pgdata:

networks:
  fluently_network:
    driver: bridge
