// Configuration
const API_BASE_URL = 'https://fluently-app.ru';
const AUTH_URL = `${API_BASE_URL}/auth/google`;

// DOM elements - will be set after DOM loads
let authSection, userInfo, wordInputSection, loginBtn, logoutBtn, userEmail, wordInput, addWordBtn, loading, message;

// Initialize popup
document.addEventListener('DOMContentLoaded', function() {
    console.log('Popup DOM loaded');
    
    // Test permissions first
    testPermissions();
    
    // Get DOM elements
    authSection = document.getElementById('authSection');
    userInfo = document.getElementById('userInfo');
    wordInputSection = document.getElementById('wordInputSection');
    loginBtn = document.getElementById('loginBtn');
    logoutBtn = document.getElementById('logoutBtn');
    userEmail = document.getElementById('userEmail');
    wordInput = document.getElementById('wordInput');
    addWordBtn = document.getElementById('addWordBtn');
    loading = document.getElementById('loading');
    message = document.getElementById('message');
    
    console.log('DOM elements found:', {
        authSection: !!authSection,
        userInfo: !!userInfo,
        loginBtn: !!loginBtn,
        logoutBtn: !!logoutBtn
    });
    
    checkAuthStatus();
    setupEventListeners();
});

function testPermissions() {
    console.log('Testing extension permissions...');
    
    // Test chrome object
    if (!chrome) {
        console.error('Chrome API not available!');
        return;
    }
    
    // Test storage permission
    if (chrome.storage) {
        console.log('‚úÖ Storage permission available');
        // Test a simple storage operation
        chrome.storage.local.set({test: 'value'}, function() {
            if (chrome.runtime.lastError) {
                console.error('‚ùå Storage test failed:', chrome.runtime.lastError);
            } else {
                console.log('‚úÖ Storage test successful');
                chrome.storage.local.remove('test');
            }
        });
        
        // Also test checking existing auth data
        chrome.storage.local.get(['accessToken', 'userEmail'], function(result) {
            console.log('üíæ Current storage contents:', result);
            console.log('üíæ Storage keys:', Object.keys(result));
        });
    } else {
        console.error('‚ùå Storage permission NOT available');
    }
    
    // Test tabs permission
    if (chrome.tabs) {
        console.log('‚úÖ Tabs permission available');
    } else {
        console.error('‚ùå Tabs permission NOT available');
    }
    
    // Test scripting permission
    if (chrome.scripting) {
        console.log('‚úÖ Scripting permission available');
    } else {
        console.error('‚ùå Scripting permission NOT available');
    }
    
    // Test runtime
    if (chrome.runtime) {
        console.log('‚úÖ Runtime API available');
    } else {
        console.error('‚ùå Runtime API NOT available');
    }
}

// Listen for changes in chrome.storage.local to update UI on auth changes (only if available)
if (chrome && chrome.storage && chrome.storage.onChanged) {
    chrome.storage.onChanged.addListener(function(changes, area) {
        if (area === 'local' && (changes.accessToken || changes.userEmail)) {
            console.log('Storage changed - auth data updated:', changes);
            
            // Re-check auth status when storage changes
            setTimeout(() => {
                checkAuthStatus();
            }, 100);
        }
    });
}

function setupEventListeners() {
    console.log('Setting up event listeners...');
    
    if (loginBtn) {
        loginBtn.addEventListener('click', handleLogin);
        console.log('Login button listener added');
    } else {
        console.error('Login button not found!');
    }
    
    if (logoutBtn) {
        logoutBtn.addEventListener('click', handleLogout);
        console.log('Logout button listener added');
    }
    
    if (addWordBtn) {
        addWordBtn.addEventListener('click', handleAddWord);
    }
    
    if (wordInput) {
        wordInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                handleAddWord();
            }
        });
    }
}

// Authentication functions
function checkAuthStatus() {
    console.log('Checking auth status...');
    
    // Test if chrome.storage is available
    if (!chrome || !chrome.storage) {
        console.error('Chrome storage API not available! Extension may not be properly loaded.');
        showUnauthenticatedState();
        showError('–†–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ.');
        return;
    }
    
    chrome.storage.local.get(['accessToken', 'userEmail'], function(result) {
        if (chrome.runtime.lastError) {
            console.error('Storage error:', chrome.runtime.lastError);
            showUnauthenticatedState();
            showError('–ù–µ —É–¥–∞—ë—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É: ' + chrome.runtime.lastError.message);
            return;
        }
        
        console.log('Storage result:', result);
        console.log('Storage keys found:', Object.keys(result));
        console.log('accessToken exists:', !!result.accessToken);
        console.log('userEmail exists:', !!result.userEmail);
        
        if (result.accessToken) {
            console.log('User is authenticated');
            showAuthenticatedState(result.userEmail);
        } else {
            console.log('User is not authenticated - no accessToken found');
            showUnauthenticatedState();
        }
    });
}

function handleLogin() {
    console.log('Starting login process...');
    
    // Prevent multiple clicks
    if (loginBtn && loginBtn.disabled) {
        console.log('Login already in progress');
        return;
    }
    
    // Check if tabs API is available
    if (!chrome || !chrome.tabs) {
        console.error('Chrome tabs API not available!');
        showError('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.');
        return;
    }
    
    // Disable button immediately
    if (loginBtn) {
        loginBtn.disabled = true;
        loginBtn.textContent = '–ù–∞—á–∏–Ω–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...';
    }
    
    // Send message to background script to handle auth
    // Background script persists even when popup closes
    chrome.runtime.sendMessage({ action: 'startAuth' }, function(response) {
        if (chrome.runtime.lastError) {
            console.error('Failed to start auth:', chrome.runtime.lastError);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é: ' + chrome.runtime.lastError.message);
            
            // Re-enable button on error
            if (loginBtn) {
                loginBtn.disabled = false;
                loginBtn.textContent = '–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google';
            }
            return;
        }
        
        if (response && !response.success) {
            console.error('Auth start failed:', response.error);
            showError('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ' + response.error);
            
            // Re-enable button on error
            if (loginBtn) {
                loginBtn.disabled = false;
                loginBtn.textContent = '–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google';
            }
            return;
        }
        
        console.log('Auth request sent to background script');
        
        // Show a message to user and inform them they can close the popup
        showMessage('–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏... –ú–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ –≤–æ –≤—Ä–µ–º—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.', 'success');
        
        // Update button text
        if (loginBtn) {
            loginBtn.textContent = '–ò–¥—ë—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...';
            
            // Re-enable after a few seconds
            setTimeout(() => {
                if (loginBtn) {
                    loginBtn.textContent = '–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google';
                    loginBtn.disabled = false;
                }
            }, 10000); // Increased timeout to 10 seconds
        }
    });
}

function handleLogout() {
    chrome.storage.local.remove(['accessToken', 'userEmail'], function() {
        showUnauthenticatedState();
        showMessage('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'success');
    });
}

function saveAuthToken(token, email) {
    console.log('Saving auth token...', { token: !!token, email });
    
    if (!chrome || !chrome.storage) {
        console.error('Chrome storage API not available!');
        showError('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
        return;
    }
    
    chrome.storage.local.set({
        accessToken: token,
        userEmail: email
    }, function() {
        if (chrome.runtime.lastError) {
            console.error('Error saving to storage:', chrome.runtime.lastError);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é: ' + chrome.runtime.lastError.message);
            return;
        }
        
        console.log('Auth data saved successfully');
        showAuthenticatedState(email);
        showMessage('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
    });
}

function showAuthenticatedState(email) {
    console.log('Showing authenticated state for:', email);
    
    if (authSection) {
        authSection.style.display = 'none';
    }
    if (userInfo) {
        userInfo.style.display = 'block';
    }
    if (wordInputSection) {
        wordInputSection.style.display = 'block';
    }
    if (userEmail) {
        userEmail.textContent = email || 'User';
    }
}

function showUnauthenticatedState() {
    console.log('Showing unauthenticated state');
    
    if (authSection) {
        authSection.style.display = 'block';
    }
    if (userInfo) {
        userInfo.style.display = 'none';
    }
    if (wordInputSection) {
        wordInputSection.style.display = 'none';
    }
}

// Word management functions
async function handleAddWord() {
    const word = wordInput.value.trim();
    
    // Client-side validation
    if (!word) {
        showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ', 'error');
        return;
    }
    
    // Check if word contains only letters (basic validation)
    if (!/^[a-zA-Z\s-']+$/.test(word)) {
        showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)', 'error');
        return;
    }
    
    // Check word length
    if (word.length > 50) {
        showMessage('–°–ª–æ–≤–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)', 'error');
        return;
    }
    
    if (word.length < 2) {
        showMessage('–°–ª–æ–≤–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)', 'error');
        return;
    }

    // Get auth token
    chrome.storage.local.get(['accessToken'], async function(result) {
        if (!result.accessToken) {
            showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É', 'error');
            return;
        }

        setLoading(true);
        
        try {
            const response = await addWordToNotLearned(word, result.accessToken);
            if (response.success) {
                showMessage(`"${word}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑—É—á–µ–Ω–∏—è!`, 'success');
                wordInput.value = '';
            } else {
                // Handle authentication errors
                if (response.authError) {
                    // Clear stored auth and show login screen
                    chrome.storage.local.remove(['accessToken', 'userEmail']);
                    showUnauthenticatedState();
                    showMessage(response.error, 'error');
                } else {
                    showMessage(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ', 'error');
                }
            }
        } catch (error) {
            console.error('Error adding word:', error);
            showMessage('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', 'error');
        } finally {
            setLoading(false);
        }
    });
}

async function addWordToNotLearned(word, token) {
    try {
        const response = await fetch(`${API_BASE_URL}/api/v1/not-learned-words`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ word: word })
        });

        // Handle different response status codes
        if (response.ok) {
            const data = await response.json();
            return { success: true, data: data };
        } else {
            // Try to get error message from response body
            let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
            
            try {
                const errorText = await response.text();
                if (errorText) {
                    errorMessage = errorText;
                }
            } catch (e) {
                // If we can't read the error body, use the status text
            }
            
            // Handle specific error cases
            switch (response.status) {
                case 400:
                    if (errorMessage.includes('word cannot be empty')) {
                        return { success: false, error: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è' };
                    }
                    return { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ' + errorMessage };
                    
                case 401:
                    return { success: false, error: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.', authError: true };
                    
                case 404:
                    if (errorMessage.includes('word not found in database')) {
                        return { success: false, error: `"${word}" –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ —Å–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ.` };
                    }
                    return { success: false, error: '–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ' + errorMessage };
                    
                case 409:
                    if (errorMessage.includes('word already in not learned list')) {
                        return { success: false, error: `"${word}" —É–∂–µ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∏–∑—É—á–µ–Ω–∏—è!` };
                    }
                    return { success: false, error: '–°–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ' + errorMessage };
                    
                case 500:
                    return { success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' };
                    
                default:
                    return { success: false, error: errorMessage };
            }
        }
    } catch (error) {
        // Network errors
        if (error.name === 'TypeError' && error.message.includes('fetch')) {
            return { success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.' };
        }
        throw error;
    }
}

// UI helper functions
function setLoading(isLoading) {
    if (isLoading) {
        loading.style.display = 'block';
        addWordBtn.disabled = true;
        wordInput.disabled = true;
    } else {
        loading.style.display = 'none';
        addWordBtn.disabled = false;
        wordInput.disabled = false;
    }
}

function showMessage(text, type) {
    message.textContent = text;
    message.className = `message ${type} show`;
    
    // Auto-hide after 3 seconds
    setTimeout(() => {
        message.classList.remove('show');
    }, 3000);
}

function showError(text) {
    showMessage(text, 'error');
}

// Add a manual permission test function for debugging
function requestPermissions() {
    if (!chrome || !chrome.permissions) {
        showError('API —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
        return;
    }
    
    chrome.permissions.request({
        permissions: ['storage', 'tabs', 'scripting'],
        origins: ['https://fluently-app.ru/*']
    }, function(granted) {
        if (granted) {
            showMessage('–†–∞–∑—Ä–µ—à–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã!', 'success');
            // Re-test permissions
            testPermissions();
        } else {
            showError('–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã');
        }
    });
} 