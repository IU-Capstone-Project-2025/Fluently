// handlers.go
package handlers

import (
	"context"
	"fmt"
	"time"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v3"

	"telegram-bot/internal/bot/fsm"
)

// HandleStartCommand handles the /start command
func (s *HandlerService) HandleStartCommand(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Reset user to initial state
	if err := s.stateManager.ResetUserToInitial(ctx, userID); err != nil {
		s.logger.Error("Failed to reset user state", zap.Error(err))
		return err
	}

	// Transition to welcome state
	if err := s.stateManager.SetState(ctx, userID, fsm.StateWelcome); err != nil {
		s.logger.Error("Failed to set welcome state", zap.Error(err))
		return err
	}

	// Send welcome message
	welcomeText := fmt.Sprintf(
		"üëã –ü—Ä–∏–≤–µ—Ç, %s!\n\n"+
			"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fluently ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n\n"+
			"–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å—Ç–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ –≥–æ–≤–æ—Ä—è—â–∏–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —á–µ—Ä–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏, –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.",
		c.Sender().FirstName,
	)

	// Add "Get Started" button
	getStartedButton := &tele.InlineButton{
		Text: "–ù–∞—á–∞—Ç—å",
		Data: "onboarding:start",
	}
	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{*getStartedButton},
		},
	}

	return c.Send(welcomeText, keyboard)
}

// HandleHelpCommand handles the /help command
func (s *HandlerService) HandleHelpCommand(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	helpText := "üåü *–°–ø—Ä–∞–≤–∫–∞ –ø–æ Fluently Bot* üåü\n\n" +
		"–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n\n" +
		"*/start* - –ù–∞—á–∞—Ç—å –≤–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞\n" +
		"*/learn* - –ù–∞—á–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —É—Ä–æ–∫\n" +
		"*/settings* - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è\n" +
		"*/test* - –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞\n" +
		"*/stats* - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è\n" +
		"*/help* - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏\n" +
		"*/cancel* - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n" +
		"–ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å."

	return c.Send(helpText, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
}

// HandleSettingsCommand handles the /settings command
func (s *HandlerService) HandleSettingsCommand(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Get current user progress for settings
	userProgress, err := s.GetUserProgress(ctx, userID)
	if err != nil {
		s.logger.Error("Failed to get user progress", zap.Error(err))
		return err
	}

	// Set user state to settings
	if err := s.stateManager.SetState(ctx, userID, fsm.StateSettings); err != nil {
		s.logger.Error("Failed to set settings state", zap.Error(err))
		return err
	}

	// Create settings message
	settingsText := "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n" +
		fmt.Sprintf("üî§ –£—Ä–æ–≤–µ–Ω—å CEFR: *%s*\n", userProgress.CEFRLevel) +
		fmt.Sprintf("üìö –°–ª–æ–≤ –≤ –¥–µ–Ω—å: *%d*\n", userProgress.WordsPerDay) +
		fmt.Sprintf("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: *%s*\n", formatNotificationTime(userProgress.NotificationTime)) +
		"\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"

	// Create settings keyboard
	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{{Text: "üî§ –£—Ä–æ–≤–µ–Ω—å CEFR", Data: "settings:cefr_level"}},
			{{Text: "üìö –°–ª–æ–≤ –≤ –¥–µ–Ω—å", Data: "settings:words_per_day"}},
			{{Text: "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", Data: "settings:notifications"}},
			{{Text: "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", Data: "menu:main"}},
		},
	}

	return c.Send(settingsText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard)
}

// HandleLearnCommand handles the /learn command
func (s *HandlerService) HandleLearnCommand(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Check if the user has completed the onboarding process
	userProgress, err := s.GetUserProgress(ctx, userID)
	if err != nil {
		s.logger.Error("Failed to get user progress", zap.Error(err))
		return err
	}

	// If user hasn't completed onboarding, prompt them to start
	if userProgress.CEFRLevel == "" {
		startButton := &tele.InlineButton{
			Text: "–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É",
			Data: "onboarding:start",
		}
		keyboard := &tele.ReplyMarkup{
			InlineKeyboard: [][]tele.InlineButton{
				{*startButton},
			},
		}

		return c.Send("–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É. "+
			"–î–∞–≤–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ.", keyboard)
	}

	// Set user state to lesson start
	if err := s.stateManager.SetState(ctx, userID, fsm.StateLessonStart); err != nil {
		s.logger.Error("Failed to set lesson start state", zap.Error(err))
		return err
	}

	// Create new lesson data
	lessonData := &fsm.LessonData{
		StartTime: time.Now(),
	}

	// Store lesson data
	if err := s.stateManager.StoreTempData(ctx, userID, fsm.TempDataLesson, lessonData); err != nil {
		s.logger.Error("Failed to store lesson data", zap.Error(err))
		return err
	}

	// Send lesson start message
	lessonText := fmt.Sprintf(
		"üìö *–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —É—Ä–æ–∫*\n\n"+
			"–î–∞–≤–∞–π—Ç–µ –∏–∑—É—á–∏–º %d –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è.\n\n"+
			"–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –≤–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —É—Ä–æ–∫?",
		userProgress.WordsPerDay,
	)

	// Create lesson keyboard
	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{
				{Text: "–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ", Data: "lesson:start"},
				{Text: "–ü–æ–∑–∂–µ", Data: "lesson:later"},
			},
		},
	}

	return c.Send(lessonText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard)
}

// HandleTestCommand handles the /test command
func (s *HandlerService) HandleTestCommand(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Set user state to vocabulary test
	if err := s.stateManager.SetState(ctx, userID, fsm.StateVocabularyTest); err != nil {
		s.logger.Error("Failed to set vocabulary test state", zap.Error(err))
		return err
	}

	// Send test introduction message
	testText := "üß† *–¢–µ—Å—Ç —É—Ä–æ–≤–Ω—è CEFR*\n\n" +
		"–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º —Å–æ–≥–ª–∞—Å–Ω–æ —à–∫–∞–ª–µ CEFR.\n\n" +
		"–í—ã —É–≤–∏–¥–∏—Ç–µ —Å–µ—Ä–∏—é —Å–ª–æ–≤. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ —É–∫–∞–∂–∏—Ç–µ, —Ö–æ—Ä–æ—à–æ –ª–∏ –≤—ã –µ–≥–æ –∑–Ω–∞–µ—Ç–µ.\n\n" +
		"–¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 5 —á–∞—Å—Ç–µ–π –∏ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 5-10 –º–∏–Ω—É—Ç. –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?"

	// Create test keyboard
	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{
				{Text: "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", Data: "test:start"},
				{Text: "–ü–æ–∑–∂–µ", Data: "menu:main"},
			},
		},
	}

	return c.Send(testText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard)
}

// HandleStatsCommand handles the /stats command
func (s *HandlerService) HandleStatsCommand(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Get user progress
	userProgress, err := s.GetUserProgress(ctx, userID)
	if err != nil {
		s.logger.Error("Failed to get user progress", zap.Error(err))
		return err
	}

	// Create stats message
	statsText := fmt.Sprintf(
		"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è*\n\n"+
			"üî§ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: *%s*\n"+
			"üìö –°–ª–æ–≤ –≤ –¥–µ–Ω—å: *%d*\n"+
			"üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: *%d –¥–Ω–µ–π*\n"+
			"üìñ –í—Å–µ–≥–æ —Å–ª–æ–≤ –∏–∑—É—á–µ–Ω–æ: *%d*\n"+
			"üéØ –£—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: *%d*\n"+
			"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: *%d –º–∏–Ω—É—Ç*\n",
		userProgress.CEFRLevel,
		userProgress.WordsPerDay,
		0, // streak days - placeholder
		0, // total words - placeholder
		0, // lessons completed - placeholder
		0, // total time - placeholder
	)

	// Create back button
	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{{Text: "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", Data: "menu:main"}},
		},
	}

	return c.Send(statsText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard)
}

// HandleCancelCommand handles the /cancel command
func (s *HandlerService) HandleCancelCommand(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Reset user to initial state
	if err := s.stateManager.ResetUserToInitial(ctx, userID); err != nil {
		s.logger.Error("Failed to reset user state", zap.Error(err))
		return err
	}

	// Send cancellation message
	cancelText := "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n" +
		"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."

	return c.Send(cancelText)
}

// Placeholder handler functions - these need to be implemented
func (s *HandlerService) HandleWelcomeMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
}

func (s *HandlerService) HandleMethodExplanationMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")
}

func (s *HandlerService) HandleQuestionGoalMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ü–µ–ª–∏.")
}

func (s *HandlerService) HandleQuestionConfidenceMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏.")
}

func (s *HandlerService) HandleQuestionSerialsMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Å–µ—Ä–∏–∞–ª–∞—Ö.")
}

func (s *HandlerService) HandleQuestionExperienceMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –æ–ø—ã—Ç–µ.")
}

func (s *HandlerService) HandleSettingsWordsPerDayInputMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å.")
}

func (s *HandlerService) HandleSettingsTimeInputMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
}

func (s *HandlerService) HandleWaitingForTranslationMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥.")
}

func (s *HandlerService) HandleWaitingForAudioMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç.")
}

func (s *HandlerService) HandleUnknownStateMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –¥–µ–ª–∞—Ç—å –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
}

// Callback handlers - placeholder implementations
func (s *HandlerService) HandleOnboardingStartCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ù–∞—á–∏–Ω–∞–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ...")
}

func (s *HandlerService) HandleOnboardingMethodCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–ª—É—á–µ–Ω callback –º–µ—Ç–æ–¥–∏–∫–∏.")
}

func (s *HandlerService) HandleTestStartCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç...")
}

func (s *HandlerService) HandleLessonStartCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ù–∞—á–∏–Ω–∞–µ–º —É—Ä–æ–∫...")
}

func (s *HandlerService) HandleLessonLaterCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–£—Ä–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω.")
}

func (s *HandlerService) HandleSettingsWordsPerDayCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å...")
}

func (s *HandlerService) HandleSettingsNotificationsCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
}

func (s *HandlerService) HandleSettingsCEFRLevelCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è CEFR...")
}

func (s *HandlerService) HandleMainMenuCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
}

func (s *HandlerService) HandleSettingsMenuCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
}

func (s *HandlerService) HandleLearnMenuCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ú–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è...")
}

func (s *HandlerService) HandleHelpMenuCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ú–µ–Ω—é –ø–æ–º–æ—â–∏...")
}

func (s *HandlerService) HandleUnknownCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback.")
}

func (s *HandlerService) HandleAudioExerciseResponse(ctx context.Context, c tele.Context, userID int64, voice interface{}) error {
	return c.Send("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∞—É–¥–∏–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ.")
}

func formatNotificationTime(timeStr string) string {
	if timeStr == "" {
		return "–û—Ç–∫–ª—é—á–µ–Ω—ã"
	}
	return timeStr
}
