package handlers

import (
	"context"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v3"

	"telegram-bot/internal/bot/fsm"
)

// HandleQuestionGoalMessage handles goal question messages
func (s *HandlerService) HandleQuestionGoalMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ü–µ–ª–∏.")
}

// HandleQuestionConfidenceMessage handles confidence question messages
func (s *HandlerService) HandleQuestionConfidenceMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏.")
}

// HandleQuestionExperienceMessage handles experience question messages
func (s *HandlerService) HandleQuestionExperienceMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –æ–ø—ã—Ç–µ.")
}

// HandleQuestionWordsPerDayMessage handles words per day question messages
func (s *HandlerService) HandleQuestionWordsPerDayMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –≤ –¥–µ–Ω—å.")
}

// HandleQuestionNotificationsMessage handles notifications question messages
func (s *HandlerService) HandleQuestionNotificationsMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
}

// HandleQuestionNotificationTimeMessage handles notification time question messages
func (s *HandlerService) HandleQuestionNotificationTimeMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
}

// HandleQuestionnaireStartCallback handles the questionnaire start callback
func (s *HandlerService) HandleQuestionnaireStartCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Validate current state
	if currentState != fsm.StateQuestionnaire {
		s.logger.Warn("Invalid state for questionnaire start",
			zap.Int64("user_id", userID),
			zap.String("expected_state", string(fsm.StateQuestionnaire)),
			zap.String("actual_state", string(currentState)))
		return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
	}

	// Transition to first question state
	if err := s.stateManager.SetState(ctx, userID, fsm.StateQuestionGoal); err != nil {
		s.logger.Error("Failed to set question goal state", zap.Error(err))
		return err
	}

	// Send first question
	questionText := "üéØ *–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å*\n\n" +
		"–ö–∞–∫–∞—è —É —Ç–µ–±—è –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ?"

	// Create answer options
	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{{Text: "–†–∞–±–æ—Ç–∞/–∫–∞—Ä—å–µ—Ä–∞", Data: "goal:work"}},
			{{Text: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", Data: "goal:travel"}},
			{{Text: "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", Data: "goal:education"}},
			{{Text: "–û–±—â–µ–Ω–∏–µ", Data: "goal:communication"}},
		},
	}

	return c.Send(questionText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard)
}

// HandleGoalCallback handles goal question callback
func (s *HandlerService) HandleGoalCallback(ctx context.Context, c tele.Context, userID int64, answer string) error {
	s.logger.Info("User answered goal question", zap.Int64("user_id", userID), zap.String("answer", answer))

	// Store goal answer
	if err := s.stateManager.StoreTempData(ctx, userID, fsm.TempDataGoal, answer); err != nil {
		s.logger.Error("Failed to store goal answer", zap.Error(err))
	}

	// Transition to confidence question
	if err := s.stateManager.SetState(ctx, userID, fsm.StateQuestionConfidence); err != nil {
		s.logger.Error("Failed to set confidence state", zap.Error(err))
		return err
	}

	// Send confidence question
	questionText := "ü§î *–í–æ–ø—Ä–æ—Å 2*\n\n" +
		"–ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ?"

	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{{Text: "–ù–æ–≤–∏—á–æ–∫", Data: "confidence:beginner"}},
			{{Text: "–ë–∞–∑–æ–≤—ã–π", Data: "confidence:elementary"}},
			{{Text: "–°—Ä–µ–¥–Ω–∏–π", Data: "confidence:intermediate"}},
			{{Text: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", Data: "confidence:advanced"}},
		},
	}

	return c.Send(questionText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard)
}

// HandleConfidenceCallback handles confidence question callback
func (s *HandlerService) HandleConfidenceCallback(ctx context.Context, c tele.Context, userID int64, answer string) error {
	s.logger.Info("User answered confidence question", zap.Int64("user_id", userID), zap.String("answer", answer))

	// Store confidence level for later use
	if err := s.stateManager.StoreTempData(ctx, userID, fsm.TempDataConfidence, answer); err != nil {
		s.logger.Error("Failed to store confidence level", zap.Error(err))
	}

	// Transition directly to experience question (skip serials)
	if err := s.stateManager.SetState(ctx, userID, fsm.StateQuestionExperience); err != nil {
		s.logger.Error("Failed to set experience state", zap.Error(err))
		return err
	}

	// Send experience question
	questionText := "üéì *–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å*\n\n" +
		"–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—ã –∏–∑—É—á–∞–µ—à—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π?"

	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{{Text: "–¢–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—é", Data: "experience:beginner"}},
			{{Text: "–ú–µ–Ω—å—à–µ –≥–æ–¥–∞", Data: "experience:less_year"}},
			{{Text: "1-3 –≥–æ–¥–∞", Data: "experience:1_3_years"}},
			{{Text: "–ë–æ–ª—å—à–µ 3 –ª–µ—Ç", Data: "experience:more_3_years"}},
		},
	}

	return c.Send(questionText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard)
}

// HandleExperienceCallback handles experience question callback
func (s *HandlerService) HandleExperienceCallback(ctx context.Context, c tele.Context, userID int64, answer string) error {
	s.logger.Info("User answered experience question", zap.Int64("user_id", userID), zap.String("answer", answer))

	// Store experience answer
	if err := s.stateManager.StoreTempData(ctx, userID, fsm.TempDataExperience, answer); err != nil {
		s.logger.Error("Failed to store experience answer", zap.Error(err))
	}

	// Transition to words per day question
	if err := s.stateManager.SetState(ctx, userID, fsm.StateQuestionWordsPerDay); err != nil {
		s.logger.Error("Failed to set words per day question state", zap.Error(err))
		return err
	}

	// Send words per day question
	questionText := "üìö *–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å?*\n\n" +
		"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n\n" +
		"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å —Å 10 —Å–ª–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."

	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{{Text: "5 —Å–ª–æ–≤", Data: "words_per_day:5"}},
			{{Text: "10 —Å–ª–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", Data: "words_per_day:10"}},
			{{Text: "15 —Å–ª–æ–≤", Data: "words_per_day:15"}},
			{{Text: "20 —Å–ª–æ–≤", Data: "words_per_day:20"}},
		},
	}

	return c.Send(questionText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard)
}

// HandleWordsPerDayCallback handles words per day question callback
func (s *HandlerService) HandleWordsPerDayCallback(ctx context.Context, c tele.Context, userID int64, answer string) error {
	s.logger.Info("User answered words per day question", zap.Int64("user_id", userID), zap.String("answer", answer))

	// Convert answer to integer
	var wordsPerDay int
	switch answer {
	case "5":
		wordsPerDay = 5
	case "10":
		wordsPerDay = 10
	case "15":
		wordsPerDay = 15
	case "20":
		wordsPerDay = 20
	default:
		wordsPerDay = 10 // Default fallback
	}

	// Store words per day answer
	if err := s.stateManager.StoreTempData(ctx, userID, fsm.TempDataWordsPerDay, wordsPerDay); err != nil {
		s.logger.Error("Failed to store words per day answer", zap.Error(err))
	}

	// Transition to notifications question
	if err := s.stateManager.SetState(ctx, userID, fsm.StateQuestionNotifications); err != nil {
		s.logger.Error("Failed to set notifications question state", zap.Error(err))
		return err
	}

	// Send notifications question
	questionText := "üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*\n\n" +
		"–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏–∑—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤?\n\n" +
		"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É!"

	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{{Text: "‚úÖ –î–∞, –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", Data: "notifications:enabled"}},
			{{Text: "‚ùå –ù–µ—Ç, –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", Data: "notifications:disabled"}},
		},
	}

	return c.Send(questionText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard)
}

// HandleNotificationsCallback handles notifications question callback
func (s *HandlerService) HandleNotificationsCallback(ctx context.Context, c tele.Context, userID int64, answer string) error {
	s.logger.Info("User answered notifications question", zap.Int64("user_id", userID), zap.String("answer", answer))

	// Convert answer to boolean
	notificationsEnabled := answer == "enabled"

	// Store notifications answer
	if err := s.stateManager.StoreTempData(ctx, userID, fsm.TempDataNotifications, notificationsEnabled); err != nil {
		s.logger.Error("Failed to store notifications answer", zap.Error(err))
	}

	if notificationsEnabled {
		// If notifications are enabled, ask for time preference
		if err := s.stateManager.SetState(ctx, userID, fsm.StateQuestionNotificationTime); err != nil {
			s.logger.Error("Failed to set notification time question state", zap.Error(err))
			return err
		}

		// Send notification time question
		questionText := "‚è∞ *–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n" +
			"–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –¥–Ω—è –≤–∞–º —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏–∑—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤?"

		keyboard := &tele.ReplyMarkup{
			InlineKeyboard: [][]tele.InlineButton{
				{{Text: "üåÖ –£—Ç—Ä–æ–º (9:00)", Data: "notification_time:09:00"}},
				{{Text: "üè¢ –î–Ω–µ–º (14:00)", Data: "notification_time:14:00"}},
				{{Text: "üåÜ –í–µ—á–µ—Ä–æ–º (19:00)", Data: "notification_time:19:00"}},
				{{Text: "üåô –ü–æ–∑–¥–Ω–æ –≤–µ—á–µ—Ä–æ–º (21:00)", Data: "notification_time:21:00"}},
			},
		}

		return c.Send(questionText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard)
	} else {
		// If notifications are disabled, store default time and proceed to CEFR test
		if err := s.stateManager.StoreTempData(ctx, userID, fsm.TempDataNotificationTime, "10:00"); err != nil {
			s.logger.Error("Failed to store default notification time", zap.Error(err))
		}

		return s.proceedToVocabularyTest(ctx, c, userID)
	}
}

// HandleNotificationTimeCallback handles notification time question callback
func (s *HandlerService) HandleNotificationTimeCallback(ctx context.Context, c tele.Context, userID int64, answer string) error {
	s.logger.Info("User answered notification time question", zap.Int64("user_id", userID), zap.String("answer", answer))

	// Store notification time answer
	if err := s.stateManager.StoreTempData(ctx, userID, fsm.TempDataNotificationTime, answer); err != nil {
		s.logger.Error("Failed to store notification time answer", zap.Error(err))
	}

	return s.proceedToVocabularyTest(ctx, c, userID)
}

// proceedToVocabularyTest transitions to CEFR vocabulary test
func (s *HandlerService) proceedToVocabularyTest(ctx context.Context, c tele.Context, userID int64) error {
	// Transition to vocabulary test
	if err := s.stateManager.SetState(ctx, userID, fsm.StateVocabularyTest); err != nil {
		s.logger.Error("Failed to set vocabulary test state", zap.Error(err))
		return err
	}

	// Send completion message
	completionText := "üéâ *–û—Ç–ª–∏—á–Ω–æ!*\n\n" +
		"–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–≤–æ–π —Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å –ø–æ–º–æ—â—å—é –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ç–µ—Å—Ç–∞.\n\n" +
		"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!"

	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{{Text: "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", Data: "test:start"}},
			{{Text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç", Data: "test:skip"}},
		},
	}

	return c.Send(completionText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard)
}
