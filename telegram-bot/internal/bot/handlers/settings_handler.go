package handlers

import (
	"context"
	"fmt"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v3"

	"telegram-bot/internal/bot/fsm"
)

// HandleSettingsCommand handles the /settings command
func (s *HandlerService) HandleSettingsCommand(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	// Get current user progress for settings
	userProgress, err := s.GetUserProgress(ctx, userID)
	if err != nil {
		s.logger.Error("Failed to get user progress", zap.Error(err))
		return err
	}

	// Set user state to settings
	if err := s.stateManager.SetState(ctx, userID, fsm.StateSettings); err != nil {
		s.logger.Error("Failed to set settings state", zap.Error(err))
		return err
	}

	// Create settings message
	settingsText := "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n" +
		fmt.Sprintf("üî§ –£—Ä–æ–≤–µ–Ω—å CEFR: *%s*\n", userProgress.CEFRLevel) +
		fmt.Sprintf("üìö –°–ª–æ–≤ –≤ –¥–µ–Ω—å: *%d*\n", userProgress.WordsPerDay) +
		fmt.Sprintf("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: *%s*\n", formatNotificationTime(userProgress.NotificationTime)) +
		"\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"

	// Create settings keyboard
	keyboard := &tele.ReplyMarkup{
		InlineKeyboard: [][]tele.InlineButton{
			{{Text: "üî§ –£—Ä–æ–≤–µ–Ω—å CEFR", Data: "settings:cefr_level"}},
			{{Text: "üìö –°–ª–æ–≤ –≤ –¥–µ–Ω—å", Data: "settings:words_per_day"}},
			{{Text: "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", Data: "settings:notifications"}},
			{{Text: "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", Data: "menu:main"}},
		},
	}

	return c.Send(settingsText, &tele.SendOptions{ParseMode: tele.ModeMarkdown}, keyboard)
}

// HandleSettingsWordsPerDayCallback handles words per day settings callback
func (s *HandlerService) HandleSettingsWordsPerDayCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å...")
}

// HandleSettingsNotificationsCallback handles notifications settings callback
func (s *HandlerService) HandleSettingsNotificationsCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
}

// HandleSettingsCEFRLevelCallback handles CEFR level settings callback
func (s *HandlerService) HandleSettingsCEFRLevelCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è CEFR...")
}

// HandleSettingsWordsPerDayInputMessage handles words per day input messages
func (s *HandlerService) HandleSettingsWordsPerDayInputMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –¥–µ–Ω—å.")
}

// HandleSettingsTimeInputMessage handles time input messages
func (s *HandlerService) HandleSettingsTimeInputMessage(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
}

// HandleSettingsMenuCallback handles settings menu callback
func (s *HandlerService) HandleSettingsMenuCallback(ctx context.Context, c tele.Context, userID int64, currentState fsm.UserState) error {
	return c.Send("–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
}

// formatNotificationTime formats notification time string
func formatNotificationTime(timeStr string) string {
	if timeStr == "" {
		return "–û—Ç–∫–ª—é—á–µ–Ω—ã"
	}
	return timeStr
}
