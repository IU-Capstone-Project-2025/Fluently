name: Deploy

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: false
        default: "main"
        type: string
      environment:
        description: "Deployment environment (production/staging)"
        required: false
        default: "auto"
        type: choice
        options:
          - auto
          - production
          - staging
      rollback:
        description: "Rollback to previous version"
        required: false
        default: false
        type: boolean
      dry_run:
        description: "Dry run - build images but don't deploy"
        required: false
        default: false
        type: boolean
      skip_tests:
        description: "Skip quality checks and tests (faster deployment)"
        required: false
        default: false
        type: boolean
      force_build_backend:
        description: "Force rebuild backend image"
        required: false
        default: false
        type: boolean
      force_build_telegram:
        description: "Force rebuild telegram-bot image"
        required: false
        default: false
        type: boolean
      force_build_ml_api:
        description: "Force rebuild ML API image"
        required: false
        default: false
        type: boolean
      force_build_nginx:
        description: "Force rebuild nginx image"
        required: false
        default: false
        type: boolean
      force_build_all:
        description: "Force rebuild all images"
        required: false
        default: false
        type: boolean

jobs:
  # Determine deployment environment
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      domain: ${{ steps.env.outputs.domain }}
      is_rollback: ${{ github.event.inputs.rollback || 'false' }}
    steps:
      - name: Determine environment
        id: env
        run: |
          BRANCH="${{ github.event.inputs.branch || github.ref_name }}"
          ENV_INPUT="${{ github.event.inputs.environment }}"
          
          # Auto-determine environment based on branch if not manually specified
          if [ "$ENV_INPUT" = "auto" ] || [ -z "$ENV_INPUT" ]; then
            if [ "$BRANCH" = "main" ]; then
              ENVIRONMENT="production"
            else
              ENVIRONMENT="staging"
            fi
          else
            ENVIRONMENT="$ENV_INPUT"
          fi
          
          # Set environment-specific variables
          if [ "$ENVIRONMENT" = "production" ]; then
            DOMAIN="fluently-app.ru"
            HOST="${{ secrets.DEPLOY_HOST }}"
            USERNAME="${{ secrets.DEPLOY_USERNAME }}"
            ZEROTIER_IP="${{ secrets.ZEROTIER_IP }}"
          else
            DOMAIN="fluently-app.online"
            HOST="${{ secrets.STAGING_DEPLOY_HOST }}"
            USERNAME="${{ secrets.STAGING_DEPLOY_USERNAME }}"
            ZEROTIER_IP="${{ secrets.STAGING_ZEROTIER_IP }}"
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "domain=$DOMAIN" >> $GITHUB_OUTPUT
          
          if [ "${{ github.event.inputs.rollback }}" = "true" ]; then
            echo "üîÑ Rollback requested for $ENVIRONMENT environment"
          else
            echo "üöÄ Deploying branch '$BRANCH' to $ENVIRONMENT environment ($DOMAIN)"
          fi

  # Code quality analysis
  quality-check:
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true  # Enable Go module caching
          cache-dependency-path: backend/go.sum

      - name: Install swag for Go docs generation
        run: |
          echo "üì¶ Installing swag..."
          go install github.com/swaggo/swag/cmd/swag@latest
          echo "‚úÖ Swag installed to: $(which swag || echo '$HOME/go/bin/swag')"

      - name: Initialize Go module and generate docs
        working-directory: ./backend
        run: |
          # Add Go bin to PATH
          export PATH=$PATH:$HOME/go/bin
          
          # Ensure Go modules are properly initialized
          echo "üì¶ Ensuring Go dependencies are available..."
          go mod download
          go mod tidy
          
          # Debug: Verify we're in the right place and files exist
          echo "üîç Current working directory: $(pwd)"
          echo "üîç Go version: $(go version)"
          echo "üîç Checking for main.go:"
          test -f cmd/main.go && echo "‚úÖ cmd/main.go exists" || echo "‚ùå cmd/main.go missing"
          
          # Verify swag is available
          echo "üîç Checking swag installation:"
          if command -v swag >/dev/null 2>&1; then
            echo "‚úÖ swag found in PATH: $(which swag)"
          elif [ -f "$HOME/go/bin/swag" ]; then
            echo "‚úÖ swag found at: $HOME/go/bin/swag"
          else
            echo "‚ùå swag not found"
            exit 1
          fi
          
          # Create docs directory if it doesn't exist
          mkdir -p docs
          
          # Generate Swagger documentation with proper directory specification
          echo "üìö Generating API documentation..."
          echo "Current directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          echo "Contents of cmd directory:"
          ls -la cmd/
          if command -v swag >/dev/null 2>&1; then
            swag init -g ./cmd/main.go -o ./docs --parseDependency --parseInternal
          else
            $HOME/go/bin/swag init -g ./cmd/main.go -o ./docs --parseDependency --parseInternal
          fi
          
          # Verify docs were generated
          if [ ! -d "docs" ] || [ ! -f "docs/swagger.json" ]; then
            echo "‚ùå Failed to generate docs properly"
            echo "üîç Contents of docs directory:"
            ls -la docs/ || echo "docs directory not found"
            exit 1
          fi
          
          echo "‚úÖ Documentation generated successfully"
          echo "üìÅ Generated files:"
          ls -la docs/

      - name: Start test database
        run: |
          docker compose -f docker-compose.test.yml down --volumes
          docker compose -f docker-compose.test.yml up -d test_db
        
      - name: Wait for DB to become healthy
        run: |
          for i in {1..20}; do
            docker inspect -f '{{json .State.Health.Status}}' fluently_test_db | grep -q healthy && break
            sleep 3
          done
        
      - name: Go tests with coverage
        working-directory: ./backend
        env:
          # Generic DB variables (used by code that doesn't look at *_TEST_*)
          DB_HOST:         localhost
          DB_PORT:         5433
          DB_USER:         test_user
          DB_PASSWORD:     test_password
          DB_NAME:         test_fluently_db

          # Explicit *_TEST_* variables (preferred by new config helpers)
          DB_TEST_HOST:     localhost
          DB_TEST_PORT:     5433
          DB_TEST_USER:     test_user
          DB_TEST_PASSWORD: test_password
          DB_TEST_NAME:     test_fluently_db
        run: |
          go test ./... -coverprofile=coverage.out -covermode=atomic
          go tool cover -func=coverage.out
        
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN }}
        
      - name: Stop test database & wipe volume
        if: always()
        run: docker compose -f docker-compose.test.yml down --volumes

  # ===========================================
  # BUILD STAGE - Build Docker images based on changes or force flags
  # ===========================================
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      backend-built: ${{ steps.build-flags.outputs.backend-built }}
      telegram-built: ${{ steps.build-flags.outputs.telegram-built }}
      ml-api-built: ${{ steps.build-flags.outputs.ml-api-built }}
      nginx-built: ${{ steps.build-flags.outputs.nginx-built }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for change detection

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine what to build
        id: build-flags
        run: |
          # Initialize change flags
          BACKEND_CHANGED="false"
          TELEGRAM_CHANGED="false"
          ML_API_CHANGED="false"
          NGINX_CHANGED="false"
          
          # Check for file changes if this is a push event
          if [ "${{ github.event_name }}" = "push" ]; then
            # Get the previous commit for comparison
            if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
              BASE_SHA="${{ github.event.before }}"
              echo "üîç Checking for changes since $BASE_SHA"
              
              # Check for backend changes
              if git diff --name-only $BASE_SHA HEAD | grep -q "^backend/"; then
                BACKEND_CHANGED="true"
                echo "üî® Backend files changed"
              fi
              
              # Check for telegram bot changes
              if git diff --name-only $BASE_SHA HEAD | grep -q "^telegram-bot/"; then
                TELEGRAM_CHANGED="true"
                echo "üî® Telegram bot files changed"
              fi
              
              # Check for ML API changes
              if git diff --name-only $BASE_SHA HEAD | grep -q "^analysis/distractor_api/"; then
                ML_API_CHANGED="true"
                echo "üî® ML API files changed"
              fi
              
              # Check for nginx changes
              if git diff --name-only $BASE_SHA HEAD | grep -q -E "^(frontend-website/|backend/nginx-container/)"; then
                NGINX_CHANGED="true"
                echo "üî® Nginx files changed"
              fi
            else
              # First commit or force push - build everything
              echo "üî® First commit or force push detected - building all images"
              BACKEND_CHANGED="true"
              TELEGRAM_CHANGED="true"
              ML_API_CHANGED="true"
              NGINX_CHANGED="true"
            fi
          else
            echo "üìù Manual workflow dispatch - using force build flags only"
          fi
          
          # Determine final build decisions based on changes + force flags
          BUILD_BACKEND="false"
          BUILD_TELEGRAM="false"
          BUILD_ML_API="false"
          BUILD_NGINX="false"
          
          # Force build all images
          if [ "${{ github.event.inputs.force_build_all }}" = "true" ]; then
            BUILD_BACKEND="true"
            BUILD_TELEGRAM="true"
            BUILD_ML_API="true"
            BUILD_NGINX="true"
            echo "üî® Force building all images"
          else
            # Individual force flags or changes
            if [ "${{ github.event.inputs.force_build_backend }}" = "true" ] || [ "$BACKEND_CHANGED" = "true" ]; then
              BUILD_BACKEND="true"
              if [ "${{ github.event.inputs.force_build_backend }}" = "true" ]; then
                echo "üî® Force building backend"
              else
                echo "üî® Building backend (changed)"
              fi
            fi
            
            if [ "${{ github.event.inputs.force_build_telegram }}" = "true" ] || [ "$TELEGRAM_CHANGED" = "true" ]; then
              BUILD_TELEGRAM="true"
              if [ "${{ github.event.inputs.force_build_telegram }}" = "true" ]; then
                echo "üî® Force building telegram bot"
              else
                echo "üî® Building telegram bot (changed)"
              fi
            fi
            
            if [ "${{ github.event.inputs.force_build_ml_api }}" = "true" ] || [ "$ML_API_CHANGED" = "true" ]; then
              BUILD_ML_API="true"
              if [ "${{ github.event.inputs.force_build_ml_api }}" = "true" ]; then
                echo "üî® Force building ML API"
              else
                echo "üî® Building ML API (changed)"
              fi
            fi
            
            if [ "${{ github.event.inputs.force_build_nginx }}" = "true" ] || [ "$NGINX_CHANGED" = "true" ]; then
              BUILD_NGINX="true"
              if [ "${{ github.event.inputs.force_build_nginx }}" = "true" ]; then
                echo "üî® Force building nginx"
              else
                echo "üî® Building nginx (changed)"
              fi
            fi
          fi
          
          # Output build decisions
          echo "backend-built=$BUILD_BACKEND" >> $GITHUB_OUTPUT
          echo "telegram-built=$BUILD_TELEGRAM" >> $GITHUB_OUTPUT
          echo "ml-api-built=$BUILD_ML_API" >> $GITHUB_OUTPUT
          echo "nginx-built=$BUILD_NGINX" >> $GITHUB_OUTPUT
          
          # Summary
          echo "üìã Build Summary:"
          echo "  Backend: $BUILD_BACKEND"
          echo "  Telegram Bot: $BUILD_TELEGRAM"
          echo "  ML API: $BUILD_ML_API"
          echo "  Nginx: $BUILD_NGINX"

      # Backend Build
      - name: Build and push backend image
        if: steps.build-flags.outputs.backend-built == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: docker.io/fluentlyorg/fluently-backend:latest-develop
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Telegram Bot Build  
      - name: Build and push telegram-bot image
        if: steps.build-flags.outputs.telegram-built == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./telegram-bot
          file: ./telegram-bot/Dockerfile
          push: true
          tags: docker.io/fluentlyorg/fluently-telegram-bot:latest-develop
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ML API Build (Most expensive - 15 minutes)
      - name: Build and push ML API image
        if: steps.build-flags.outputs.ml-api-built == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./analysis
          file: ./analysis/distractor_api/Dockerfile
          push: true
          tags: docker.io/fluentlyorg/fluently-ml-api:latest-develop
          cache-from: type=gha
          cache-to: type=gha,mode=min
          platforms: linux/amd64  # Single platform for faster builds

      # Nginx Build
      - name: Build and push nginx image
        if: steps.build-flags.outputs.nginx-built == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/nginx-container/Dockerfile
          push: true
          tags: docker.io/fluentlyorg/fluently-nginx:latest-develop
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build summary
        run: |
          echo "‚úÖ Build stage completed"
          echo "üî® Built images:"
          [ "${{ steps.build-flags.outputs.backend-built }}" = "true" ] && echo "  - Backend" || true
          [ "${{ steps.build-flags.outputs.telegram-built }}" = "true" ] && echo "  - Telegram Bot" || true
          [ "${{ steps.build-flags.outputs.ml-api-built }}" = "true" ] && echo "  - ML API" || true
          [ "${{ steps.build-flags.outputs.nginx-built }}" = "true" ] && echo "  - Nginx" || true
          
          # Dry run notification
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo ""
            echo "üß™ DRY RUN MODE: Images built but deployment will be skipped"
            echo "‚úÖ This was a successful dry run - images are ready for deployment"
          fi

  deploy:
    needs: [setup, build, quality-check]
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.environment }}
    if: github.event.inputs.dry_run != 'true' && always() && !failure() && !cancelled()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug values
        run: |
          echo "üîç Deployment Information:"
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          echo "Domain: ${{ needs.setup.outputs.domain }}"
          echo "Is Rollback: ${{ needs.setup.outputs.is_rollback }}"
          echo "Branch: ${{ github.event.inputs.branch || github.ref_name }}"
          echo "Tests Skipped: ${{ github.event.inputs.skip_tests }}"
          echo ""
          echo "üèóÔ∏è Built Images:"
          [ "${{ needs.build.outputs.backend-built }}" = "true" ] && echo "  ‚úÖ Backend" || echo "  ‚è≠Ô∏è Backend (skipped)"
          [ "${{ needs.build.outputs.telegram-built }}" = "true" ] && echo "  ‚úÖ Telegram Bot" || echo "  ‚è≠Ô∏è Telegram Bot (skipped)"
          [ "${{ needs.build.outputs.ml-api-built }}" = "true" ] && echo "  ‚úÖ ML API" || echo "  ‚è≠Ô∏è ML API (skipped)"
          [ "${{ needs.build.outputs.nginx-built }}" = "true" ] && echo "  ‚úÖ Nginx" || echo "  ‚è≠Ô∏è Nginx (skipped)"

      - name: Deploy to ${{ needs.setup.outputs.environment }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ needs.setup.outputs.environment == 'production' && secrets.DEPLOY_HOST || secrets.STAGING_DEPLOY_HOST }}
          username: ${{ needs.setup.outputs.environment == 'production' && secrets.DEPLOY_USERNAME || secrets.STAGING_DEPLOY_USERNAME }}
          key: ${{ needs.setup.outputs.environment == 'production' && secrets.DEPLOY_SSH_KEY || secrets.STAGING_DEPLOY_SSH_KEY }}
          timeout: 20m
          command_timeout: 20m
          script: |
            set -e
            
            BRANCH="${{ github.event.inputs.branch || github.ref_name }}"
            ENVIRONMENT="${{ needs.setup.outputs.environment }}"
            DOMAIN="${{ needs.setup.outputs.domain }}"
            IS_ROLLBACK="${{ needs.setup.outputs.is_rollback }}"
            
            echo "üîÑ Starting deployment process for $ENVIRONMENT environment"
            echo "üåê Domain: $DOMAIN"
            echo "üåü Branch: $BRANCH"
            
            # Production safety check
            if [ "$ENVIRONMENT" = "production" ]; then
              echo "‚ö†Ô∏è  PRODUCTION DEPLOYMENT WARNING"
              echo "Environment: PRODUCTION"
              echo "Domain: $DOMAIN"
              echo "Branch: $BRANCH"
              echo "Triggered by: ${{ github.actor }}"
              echo "üöÄ Proceeding with production deployment..."
              sleep 3
            fi
            
            # Navigate to project directory and set environment variables
            if [ "$ENVIRONMENT" = "production" ]; then
              cd /home/deploy/Fluently-fork
              export ZEROTIER_IP="${{ secrets.ZEROTIER_IP }}"
              BACKUP_DIR="/home/deploy/backups"
            else
              cd /home/deploy-staging/Fluently-fork
              export ZEROTIER_IP="${{ secrets.STAGING_ZEROTIER_IP }}"
              BACKUP_DIR="/home/deploy-staging/backups"
            fi
            
            # Create backup directory if it doesn't exist
            mkdir -p "$BACKUP_DIR"
            
            # Function to perform health checks
            check_health() {
              echo "üè• Performing health checks..."
              
              # Wait for services to start
              sleep 10
              
              # Check if backend is healthy
              echo "Checking backend health..."
              for i in {1..10}; do
                if curl -f "http://localhost:8070/health" >/dev/null 2>&1; then
                  echo "‚úÖ Backend is healthy"
                  break
                elif [ $i -eq 10 ]; then
                  echo "‚ùå Backend health check failed after 10 attempts"
                  return 1
                else
                  echo "‚è≥ Waiting for backend... (attempt $i/10)"
                  sleep 10
                fi
              done
              
              # Check if ML API is healthy (takes 2-3 minutes to initialize)
              echo "Checking ML API health..."
              for i in {1..20}; do
                if docker compose exec -T ml-api curl -f "http://localhost:8001/health" >/dev/null 2>&1; then
                  echo "‚úÖ ML API is healthy"
                  break
                elif [ $i -eq 20 ]; then
                  echo "‚ùå ML API health check failed after 20 attempts"
                  return 1
                else
                  echo "‚è≥ Waiting for ML API... (attempt $i/20)"
                  sleep 15
                fi
              done
              
              # Check if PostgreSQL is healthy
              echo "Checking PostgreSQL health..."
              if docker compose exec -T postgres pg_isready -U ${DB_USER:-postgres} >/dev/null 2>&1; then
                echo "‚úÖ PostgreSQL is healthy"
              else
                echo "‚ùå PostgreSQL health check failed"
                return 1
              fi
              
              # Check if nginx is responding
              echo "Checking nginx health..."
              if curl -f "http://localhost" >/dev/null 2>&1; then
                echo "‚úÖ Nginx is healthy"
              else
                echo "‚ùå Nginx health check failed"
                return 1
              fi
              
              # Check if telegram bot is healthy
              echo "Checking telegram bot health..."
              for i in {1..3}; do
                if docker compose ps telegram-bot | grep -q "Up"; then
                  echo "‚úÖ Telegram bot is running"
                  # Check if bot can connect to Telegram API
                  if docker compose logs telegram-bot | grep -q "Successfully connected to Redis"; then
                    echo "‚úÖ Telegram bot connected to Redis"
                  fi
                  if docker compose logs telegram-bot | grep -q "telegram: Not Found (404)"; then
                    echo "‚ùå Telegram bot has invalid token (404 error)"
                    echo "üîç Bot logs:"
                    docker compose logs --tail=10 telegram-bot || true
                    return 1
                  fi
                  break
                elif [ $i -eq 3 ]; then
                  echo "‚ùå Telegram bot health check failed"
                  echo "üîç Bot logs:"
                  docker compose logs --tail=10 telegram-bot || true
                  return 1
                else
                  echo "‚è≥ Waiting for telegram bot... (attempt $i/3)"
                  sleep 5
                fi
              done
              
              echo "üéâ All health checks passed!"
              return 0
            }
            
            # Function to rollback
            rollback() {
              echo "üîÑ Rolling back to previous version..."
              
              # Find the latest backup
              LATEST_BACKUP=$(ls -t "$BACKUP_DIR"/fluently-backup-*.tar.gz 2>/dev/null | head -1)
              
              if [ -z "$LATEST_BACKUP" ]; then
                echo "‚ùå No backup found for rollback!"
                return 1
              fi
              
              echo "üì¶ Found backup: $LATEST_BACKUP"
              
              # Stop current services
              docker compose down --remove-orphans || true
              
              # Create rollback backup of current state
              ROLLBACK_BACKUP="$BACKUP_DIR/fluently-rollback-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
              tar -czf "$ROLLBACK_BACKUP" --exclude=node_modules --exclude=.git . || echo "‚ö†Ô∏è Rollback backup failed"
              
              # Restore from backup
              tar -xzf "$LATEST_BACKUP" --exclude=node_modules --exclude=.git .
              
              # Start services
              docker compose up -d --force-recreate
              
              # Verify rollback
              if check_health; then
                echo "‚úÖ Rollback completed successfully!"
                return 0
              else
                echo "‚ùå Rollback failed health checks!"
                return 1
              fi
            }
            
            # Handle rollback request
            if [ "$IS_ROLLBACK" = "true" ]; then
              rollback
              exit $?
            fi
            
            # Backup current state (only for production)
            if [ "$ENVIRONMENT" = "production" ]; then
              echo "üì¶ Creating backup..."
              BACKUP_FILE="$BACKUP_DIR/fluently-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
              tar -czf "$BACKUP_FILE" --exclude=node_modules --exclude=.git . || echo "‚ö†Ô∏è Backup failed but continuing..."
              
              # Keep only last 5 backups
              ls -t "$BACKUP_DIR"/fluently-backup-*.tar.gz 2>/dev/null | tail -n +6 | xargs rm -f 2>/dev/null || true
            fi
            
            # Store current state for potential rollback
            CURRENT_STATE_BACKUP="$BACKUP_DIR/fluently-current-state-$(date +%Y%m%d-%H%M%S).tar.gz"
            tar -czf "$CURRENT_STATE_BACKUP" --exclude=node_modules --exclude=.git . || echo "‚ö†Ô∏è Current state backup failed"
            
            # Update code
            echo "üì• Updating code..."

            # Fix Git ownership issue
            git config --global --add safe.directory $(pwd)

            # Restore any local changes before pulling
            git restore .

            git fetch origin
            git checkout $BRANCH
            git pull origin $BRANCH

            # Create environment-specific .env for backend if it doesn't exist
            if [ ! -f "backend/.env" ]; then
              echo "üìù Creating backend/.env file from example..."
              cp backend/.env.example backend/.env
            fi

            # Update environment variables based on deployment target
            echo "‚öôÔ∏è Updating environment configuration..."

            # Update ZeroTier IP in backend/.env
            if grep -q "ZEROTIER_IP=" backend/.env; then
              sed -i "s/ZEROTIER_IP=.*/ZEROTIER_IP=$ZEROTIER_IP/" backend/.env
            else
              echo "ZEROTIER_IP=$ZEROTIER_IP" >> backend/.env
            fi

            # Update PUBLIC_URL in backend/.env
            sed -i "s|PUBLIC_URL=.*|PUBLIC_URL=https://$DOMAIN|g" backend/.env

            # Copy .env from backend to root for docker-compose to use
            echo "üìã Copying .env file to root directory for docker-compose..."
            cp backend/.env .env

            # Set Swagger host for the environment
            if [ "$ENVIRONMENT" = "production" ]; then
              export SWAGGER_HOST="${{ secrets.ZEROTIER_IP }}:8070"
            else
              export SWAGGER_HOST="${{ secrets.STAGING_ZEROTIER_IP }}:8070"
            fi
            
            echo "üîß Setting up environment variables..."
            echo "SWAGGER_HOST=$SWAGGER_HOST"
            
            # Add SWAGGER_HOST to .env file
            echo "SWAGGER_HOST=$SWAGGER_HOST" >> .env
            
            # Add telegram bot environment variables if they don't exist
            echo "üîß Setting up Telegram bot configuration..."
            if [ "$ENVIRONMENT" = "production" ]; then
              BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN }}"
              WEBHOOK_SECRET="${{ secrets.WEBHOOK_SECRET }}"
              echo "üìù Using production bot credentials"
            else
              BOT_TOKEN="${{ secrets.STAGING_TELEGRAM_BOT_TOKEN }}"
              WEBHOOK_SECRET="${{ secrets.STAGING_WEBHOOK_SECRET }}"
              echo "üìù Using staging bot credentials"
            fi
            
            # Debug: Check if secrets are provided (without printing actual values)
            if [ -z "$BOT_TOKEN" ]; then
              echo "‚ö†Ô∏è WARNING: BOT_TOKEN is empty for $ENVIRONMENT environment!"
              echo "Please set the following GitHub secret:"
              if [ "$ENVIRONMENT" = "production" ]; then
                echo "   TELEGRAM_BOT_TOKEN"
              else
                echo "   STAGING_TELEGRAM_BOT_TOKEN"
              fi
            else
              echo "‚úÖ BOT_TOKEN is provided (length: ${#BOT_TOKEN} characters)"
            fi
            
            if [ -z "$WEBHOOK_SECRET" ]; then
              echo "‚ö†Ô∏è WARNING: WEBHOOK_SECRET is empty for $ENVIRONMENT environment!"
              echo "Please set the following GitHub secret:"
              if [ "$ENVIRONMENT" = "production" ]; then
                echo "   WEBHOOK_SECRET"
              else
                echo "   STAGING_WEBHOOK_SECRET"
              fi
            else
              echo "‚úÖ WEBHOOK_SECRET is provided"
            fi
            
            # Set telegram bot configuration in root .env
            if [ ! -z "$BOT_TOKEN" ]; then
              if grep -q "BOT_TOKEN=" .env; then
                sed -i "s/BOT_TOKEN=.*/BOT_TOKEN=$BOT_TOKEN/" .env
              else
                echo "BOT_TOKEN=$BOT_TOKEN" >> .env
              fi
              echo "‚úÖ BOT_TOKEN set in .env file"
            else
              echo "‚ùå Skipping BOT_TOKEN setup (empty value)"
            fi
            
            if [ ! -z "$WEBHOOK_SECRET" ]; then
              if grep -q "WEBHOOK_SECRET=" .env; then
                sed -i "s/WEBHOOK_SECRET=.*/WEBHOOK_SECRET=$WEBHOOK_SECRET/" .env
              else
                echo "WEBHOOK_SECRET=$WEBHOOK_SECRET" >> .env
              fi
              echo "‚úÖ WEBHOOK_SECRET set in .env file"
            else
              echo "‚ùå Skipping WEBHOOK_SECRET setup (empty value)"
            fi
            
            # Set webhook URL
            if grep -q "WEBHOOK_URL=" .env; then
              sed -i "s|WEBHOOK_URL=.*|WEBHOOK_URL=https://$DOMAIN/webhook|g" .env
            else
              echo "WEBHOOK_URL=https://$DOMAIN/webhook" >> .env
            fi
            
            # Set Redis configuration for Docker network
            if grep -q "REDIS_ADDR=" .env; then
              sed -i "s|REDIS_ADDR=.*|REDIS_ADDR=redis:6379|g" .env
            else
              echo "REDIS_ADDR=redis:6379" >> .env
            fi

            echo "üìã Main .env file ready for docker-compose..."
            
            # Debug: Show telegram bot configuration (without sensitive values)
            echo "üîç Telegram bot configuration in .env:"
            echo "BOT_TOKEN: $(grep "BOT_TOKEN=" .env | sed 's/BOT_TOKEN=.*/BOT_TOKEN=[HIDDEN]/' || echo 'Not set')"
            echo "WEBHOOK_SECRET: $(grep "WEBHOOK_SECRET=" .env | sed 's/WEBHOOK_SECRET=.*/WEBHOOK_SECRET=[HIDDEN]/' || echo 'Not set')"
            echo "WEBHOOK_URL: $(grep "WEBHOOK_URL=" .env || echo 'Not set')"
            echo "REDIS_ADDR: $(grep "REDIS_ADDR=" .env || echo 'Not set')"
            

            # Generate nginx config from template
            echo "üîß Generating nginx configuration from template..."
            if [ "$ENVIRONMENT" = "production" ]; then
              export CERT_NAME="fluently-app-ru"
            else
              export CERT_NAME="fluently-app-online"
            fi

            export DOMAIN
            # Specify which variables to substitute, leaving nginx variables untouched
            envsubst '${DOMAIN} ${CERT_NAME}' < backend/nginx-container/nginx.conf.template > backend/nginx-container/default.conf

            echo "Generated nginx config for $DOMAIN with cert $CERT_NAME"

            # Check disk space before deployment
            echo "üìä Disk space before deployment:"
            df -h | grep -E "(overlay|docker|/$)"
            
            echo "üê≥ Pulling latest images and starting containers..."
            # Stop services first
            docker compose down --remove-orphans || true

            # Clean up Docker networks to prevent conflicts
            echo "üßπ Cleaning up Docker networks..."
            
            # Remove project-specific networks if they exist
            docker network rm fluently-fork_fluently_network 2>/dev/null || true
            docker network rm fluently_network 2>/dev/null || true
            
            # Prune unused networks
            docker network prune -f || true
            
            echo "‚úÖ Network cleanup completed"

            # Pull latest images instead of building
            echo "üì• Pulling latest Docker images..."
            docker compose pull
            
            # Start services with force recreate
            echo "üöÄ Starting services..."
            docker compose up -d --force-recreate

            # Perform health checks
            if check_health; then
              echo "üéâ Deployment completed successfully!"
              echo "üåê Application available at: https://$DOMAIN"
              echo "üïê Deployment time: $(date)"
              echo "üë§ Deployed by: ${{ github.actor }}"
              echo "üåø Branch: $BRANCH"
              echo "üè∑Ô∏è  Environment: $ENVIRONMENT"
              
              # Show running containers
              echo ""
              echo "üìã Running containers:"
              docker compose ps
              
              # Show telegram bot setup instructions
              echo ""
              echo "ü§ñ Telegram Bot Setup Instructions:"
              echo "If the bot token is set correctly, run this command to set up the webhook:"
              echo ""
              echo "curl -X POST \"https://api.telegram.org/bot\$BOT_TOKEN/setWebhook\" \\"
              echo "     -H \"Content-Type: application/json\" \\"
              echo "     -d '{\"url\": \"https://$DOMAIN/webhook\"}'"
              echo ""
              echo "Replace \$BOT_TOKEN with your actual bot token from the GitHub secrets."
              echo "You can test the webhook by sending a message to your bot."
              echo ""
              
              # Enhanced cleanup old images and free up space
              echo "üßπ Performing comprehensive Docker cleanup..."
              
              # Protect critical volumes first
              echo "üîí Verifying critical volumes are protected..."
              CRITICAL_VOLUMES="fluently_pgdata_safe fluently_grafana_data_external"
              for vol in $CRITICAL_VOLUMES; do
                if docker volume ls | grep -q "$vol"; then
                  echo "‚úÖ Critical volume protected: $vol"
                else
                  echo "‚ö†Ô∏è Warning: Critical volume not found: $vol"
                fi
              done
              
              # Remove old image versions (keep last 3 versions of each fluently image)
              echo "üóëÔ∏è Cleaning up old fluently images (keeping last 3 versions)..."
              docker images --format "{{.Repository}}:{{.Tag}} {{.ID}} {{.CreatedAt}}" | \
                grep "fluentlyorg/fluently-" | \
                sort -k3 -r | \
                tail -n +4 | \
                awk '{print $2}' | \
                xargs -r docker rmi -f 2>/dev/null || true
              
              # Clean up dangling and old unused images
              echo "üóëÔ∏è Cleaning up dangling images..."
              docker image prune -f || true
              
              echo "üóëÔ∏è Cleaning up images older than 72 hours (not in use)..."
              docker image prune -a --filter "until=72h" -f || true
              
              # Clean up build cache to free space
              echo "üóëÔ∏è Cleaning up Docker build cache..."
              docker builder prune -f || true
              
              # Clean up unused networks (safe - only removes unattached networks)
              echo "üóëÔ∏è Cleaning up unused networks..."
              docker network prune -f || true
              
              # Clean up stopped containers (safe - only removes stopped containers)
              echo "üóëÔ∏è Cleaning up stopped containers..."
              docker container prune -f || true
              
              # INTENTIONALLY SKIP volume prune to protect data
              echo "üîí Skipping volume cleanup to protect database data"
              
              # Show cleanup results
              echo "üìä Disk space after cleanup:"
              df -h | grep -E "(overlay|docker|/$)" || true
              
              echo "üì¶ Remaining Docker images:"
              docker images --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}"
              
              # Cleanup old images (keep last 3)
              echo "‚úÖ Docker cleanup completed safely"
              
              # Remove current state backup since deployment was successful
              rm -f "$CURRENT_STATE_BACKUP" || true
              
            else
              echo "‚ùå Deployment failed health checks! Starting rollback..."
              
              # Restore from current state backup
              echo "üîÑ Restoring previous state..."
              docker compose down --remove-orphans || true
              tar -xzf "$CURRENT_STATE_BACKUP" --exclude=node_modules --exclude=.git . || echo "‚ö†Ô∏è Restore failed"
              docker compose up -d --force-recreate
              
              # Cleanup failed backup
              rm -f "$CURRENT_STATE_BACKUP" || true
              
              echo "‚ùå Deployment failed and rollback attempted"
              exit 1
            fi

