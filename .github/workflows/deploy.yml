name: Deploy

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: false
        default: "main"
        type: string
      environment:
        description: "Deployment environment (production/staging)"
        required: false
        default: "auto"
        type: choice
        options:
          - auto
          - production
          - staging
      dry_run:
        description: "Dry run - build images but don't deploy"
        required: false
        default: false
        type: boolean
      skip_tests:
        description: "Skip quality checks and tests (faster deployment)"
        required: false
        default: false
        type: boolean
      force_build_backend:
        description: "Force rebuild backend image"
        required: false
        default: false
        type: boolean
      force_build_telegram:
        description: "Force rebuild telegram-bot image"
        required: false
        default: false
        type: boolean
      force_build_ml_api:
        description: "Force rebuild ML API image"
        required: false
        default: false
        type: boolean
      force_build_nginx:
        description: "Force rebuild nginx image"
        required: false
        default: false
        type: boolean
      force_build_all:
        description: "Force rebuild all images"
        required: false
        default: false
        type: boolean
      rebuild_containers:
        description: "Rebuild containers during deployment (--build flag)"
        required: false
        default: false
        type: boolean

jobs:
  # Determine deployment environment
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      domain: ${{ steps.env.outputs.domain }}
    steps:
      - name: Determine environment
        id: env
        run: |
          BRANCH="${{ github.event.inputs.branch || github.ref_name }}"
          ENV_INPUT="${{ github.event.inputs.environment }}"
          
          # Auto-determine environment based on branch if not manually specified
          if [ "$ENV_INPUT" = "auto" ] || [ -z "$ENV_INPUT" ]; then
            if [ "$BRANCH" = "main" ]; then
              ENVIRONMENT="production"
            else
              ENVIRONMENT="staging"
            fi
          else
            ENVIRONMENT="$ENV_INPUT"
          fi
          
          # Set environment-specific variables
          if [ "$ENVIRONMENT" = "production" ]; then
            DOMAIN="fluently-app.ru"
            HOST="${{ secrets.DEPLOY_HOST }}"
            USERNAME="${{ secrets.DEPLOY_USERNAME }}"
            ZEROTIER_IP="${{ secrets.ZEROTIER_IP }}"
          else
            DOMAIN="fluently-app.online"
            HOST="${{ secrets.STAGING_DEPLOY_HOST }}"
            USERNAME="${{ secrets.STAGING_DEPLOY_USERNAME }}"
            ZEROTIER_IP="${{ secrets.STAGING_ZEROTIER_IP }}"
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "domain=$DOMAIN" >> $GITHUB_OUTPUT

  # Code quality analysis
  quality-check:
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true  # Enable Go module caching
          cache-dependency-path: backend/go.sum

      - name: Install swag for Go docs generation
        run: |
          echo "📦 Installing swag..."
          go install github.com/swaggo/swag/cmd/swag@latest
          echo "✅ Swag installed to: $(which swag || echo '$HOME/go/bin/swag')"

      - name: Initialize Go module and generate docs
        working-directory: ./backend
        run: |
          # Add Go bin to PATH
          export PATH=$PATH:$HOME/go/bin
          
          # Ensure Go modules are properly initialized
          echo "📦 Ensuring Go dependencies are available..."
          go mod download
          go mod tidy
          
          # Debug: Verify we're in the right place and files exist
          echo "🔍 Current working directory: $(pwd)"
          echo "🔍 Go version: $(go version)"
          echo "🔍 Checking for main.go:"
          test -f cmd/main.go && echo "✅ cmd/main.go exists" || echo "❌ cmd/main.go missing"
          
          # Verify swag is available
          echo "🔍 Checking swag installation:"
          if command -v swag >/dev/null 2>&1; then
            echo "✅ swag found in PATH: $(which swag)"
          elif [ -f "$HOME/go/bin/swag" ]; then
            echo "✅ swag found at: $HOME/go/bin/swag"
          else
            echo "❌ swag not found"
            exit 1
          fi
          
          # Create docs directory if it doesn't exist
          mkdir -p docs
          
          # Generate Swagger documentation with proper directory specification
          echo "📚 Generating API documentation..."
          echo "Current directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          echo "Contents of cmd directory:"
          ls -la cmd/
          if command -v swag >/dev/null 2>&1; then
            swag init -g ./cmd/main.go -o ./docs --parseDependency --parseInternal
          else
            $HOME/go/bin/swag init -g ./cmd/main.go -o ./docs --parseDependency --parseInternal
          fi
          
          # Verify docs were generated
          if [ ! -d "docs" ] || [ ! -f "docs/swagger.json" ]; then
            echo "❌ Failed to generate docs properly"
            echo "🔍 Contents of docs directory:"
            ls -la docs/ || echo "docs directory not found"
            exit 1
          fi
          
          echo "✅ Documentation generated successfully"
          echo "📁 Generated files:"
          ls -la docs/

      - name: Start test database
        run: |
          docker compose -f docker-compose.test.yml down --volumes

          docker compose -f docker-compose.test.yml up -d
        
      - name: Wait for DB to become healthy
        run: |
          for i in {1..20}; do
            docker inspect -f '{{json .State.Health.Status}}' fluently_test_db | grep -q healthy && break
            sleep 3
          done
        
      - name: Seed test database
        working-directory: ./backend
        env:
          DB_HOST: localhost
          DB_PORT: 5433
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_NAME: test_fluently_db
          DB_TEST_HOST: localhost
          DB_TEST_PORT: 5433
          DB_TEST_USER: test_user
          DB_TEST_PASSWORD: test_password
          DB_TEST_NAME: test_fluently_db
        run: |
          echo "🌱 Seeding test database with sample data..."
          
          # Check if we have a database seeding/migration mechanism
          if [ -f "init.sql" ]; then
            echo "📝 Found init.sql, applying database schema..."
            PGPASSWORD=test_password psql -h localhost -p 5433 -U test_user -d test_fluently_db -f init.sql
          fi
          
          # If there's a seeding script or migration tool, run it
          if [ -f "cmd/import/main.go" ]; then
            echo "🔧 Running database import tool..."
            go run cmd/import/main.go || echo "⚠️ Import tool failed, continuing with empty database"
          fi
          
          # Alternative: Check if we can run migrations
          if command -v migrate &> /dev/null && [ -d "migrations" ]; then
            echo "🔧 Running database migrations..."
            migrate -path migrations -database "postgres://test_user:test_password@localhost:5433/test_fluently_db?sslmode=disable" up || echo "⚠️ Migrations failed, continuing"
          fi
          
          echo "✅ Database seeding completed"
        
      - name: Go tests with coverage
        working-directory: ./backend
        env:
          # Generic DB variables (used by code that doesn't look at *_TEST_*)
          DB_HOST: localhost
          DB_PORT: 5433
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_NAME: test_fluently_db

          # Explicit *_TEST_* variables (preferred by new config helpers)
          DB_TEST_HOST: localhost
          DB_TEST_PORT: 5433
          DB_TEST_USER: test_user
          DB_TEST_PASSWORD: test_password
          DB_TEST_NAME: test_fluently_db
          
          # Set test mode to help tests initialize their own data
          GO_ENV: test
          TEST_MODE: true
                    
          # JWT configuration for tests
          JWT_SECRET: ${{ secrets.TEST_JWT_SECRET }}
        run: |
          echo "🧪 Running Go tests with coverage..."
          
          # Install PostgreSQL client if needed for database operations
          if ! command -v psql &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y postgresql-client
          fi
          
          # Run tests with proper coverage collection including external test packages
          # Use explicit package listing for comprehensive coverage
          # Use -p 1 to run tests sequentially to avoid database conflicts
          go test ./... -v -coverprofile=coverage.out -covermode=atomic -coverpkg=fluently/go-backend/internal/api/v1/handlers,fluently/go-backend/internal/repository/postgres,fluently/go-backend/cmd/...,fluently/go-backend/internal/... -p 1 || {
            echo "❌ Tests failed, showing database state for debugging..."
            echo "🔍 Checking if database is accessible..."
            PGPASSWORD=test_password psql -h localhost -p 5433 -U test_user -d test_fluently_db -c "SELECT version();" || echo "❌ Database connection failed"
            
            echo "🔍 Checking database tables..."
            PGPASSWORD=test_password psql -h localhost -p 5433 -U test_user -d test_fluently_db -c "\dt" || echo "❌ Failed to list tables"
            
            echo "🔍 Checking test database logs..."
            docker logs fluently_test_db --tail=50 || true
            
            # Re-run tests to get the actual failure
            exit 1
          }
          
          go tool cover -func=coverage.out
        
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN }}
        
      - name: Stop test database & wipe volume
        if: always()
        run: docker compose -f docker-compose.test.yml down --volumes

  # ===========================================
  # BUILD STAGE - Build Docker images for staging and production
  # ===========================================
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      backend-built: ${{ steps.build-flags.outputs.backend-built }}
      telegram-built: ${{ steps.build-flags.outputs.telegram-built }}
      ml-api-built: ${{ steps.build-flags.outputs.ml-api-built }}
      nginx-built: ${{ steps.build-flags.outputs.nginx-built }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for change detection

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine what to build
        id: build-flags
        run: |
          # Initialize change flags
          BACKEND_CHANGED="false"
          TELEGRAM_CHANGED="false"
          ML_API_CHANGED="false"
          NGINX_CHANGED="false"
          
          # Check for file changes if this is a push event
          if [ "${{ github.event_name }}" = "push" ]; then
            # Get the previous commit for comparison
            if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
              BASE_SHA="${{ github.event.before }}"
              echo "🔍 Checking for changes since $BASE_SHA"
              
              # Check for backend changes
              if git diff --name-only $BASE_SHA HEAD | grep -q "^backend/"; then
                BACKEND_CHANGED="true"
                echo "🔨 Backend files changed"
              fi
              
              # Check for telegram bot changes
              if git diff --name-only $BASE_SHA HEAD | grep -q "^telegram-bot/"; then
                TELEGRAM_CHANGED="true"
                echo "🔨 Telegram bot files changed"
              fi
              
              # Check for ML API changes
              if git diff --name-only $BASE_SHA HEAD | grep -q "^analysis/distractor_api/"; then
                ML_API_CHANGED="true"
                echo "🔨 ML API files changed"
              fi
              
              # Check for nginx changes
              if git diff --name-only $BASE_SHA HEAD | grep -q -E "^(frontend-website/|backend/nginx-container/)"; then
                NGINX_CHANGED="true"
                echo "🔨 Nginx files changed"
              fi
            else
              # First commit or force push - build everything
              echo "🔨 First commit or force push detected - building all images"
              BACKEND_CHANGED="true"
              TELEGRAM_CHANGED="true"
              ML_API_CHANGED="true"
              NGINX_CHANGED="true"
            fi
          else
            echo "📝 Manual workflow dispatch - using force build flags only"
          fi
          
          # Determine final build decisions based on changes + force flags
          BUILD_BACKEND="false"
          BUILD_TELEGRAM="false"
          BUILD_ML_API="false"
          BUILD_NGINX="false"
          
          # Force build all images
          if [ "${{ github.event.inputs.force_build_all }}" = "true" ]; then
            BUILD_BACKEND="true"
            BUILD_TELEGRAM="true"
            BUILD_ML_API="true"
            BUILD_NGINX="true"
            echo "🔨 Force building all images"
          else
            # Individual force flags or changes
            if [ "${{ github.event.inputs.force_build_backend }}" = "true" ] || [ "$BACKEND_CHANGED" = "true" ]; then
              BUILD_BACKEND="true"
              if [ "${{ github.event.inputs.force_build_backend }}" = "true" ]; then
                echo "🔨 Force building backend"
              else
                echo "🔨 Building backend (changed)"
              fi
            fi
            
            if [ "${{ github.event.inputs.force_build_telegram }}" = "true" ] || [ "$TELEGRAM_CHANGED" = "true" ]; then
              BUILD_TELEGRAM="true"
              if [ "${{ github.event.inputs.force_build_telegram }}" = "true" ]; then
                echo "🔨 Force building telegram bot"
              else
                echo "🔨 Building telegram bot (changed)"
              fi
            fi
            
            if [ "${{ github.event.inputs.force_build_ml_api }}" = "true" ] || [ "$ML_API_CHANGED" = "true" ]; then
              BUILD_ML_API="true"
              if [ "${{ github.event.inputs.force_build_ml_api }}" = "true" ]; then
                echo "🔨 Force building ML API"
              else
                echo "🔨 Building ML API (changed)"
              fi
            fi
            
            if [ "${{ github.event.inputs.force_build_nginx }}" = "true" ] || [ "$NGINX_CHANGED" = "true" ]; then
              BUILD_NGINX="true"
              if [ "${{ github.event.inputs.force_build_nginx }}" = "true" ]; then
                echo "🔨 Force building nginx"
              else
                echo "🔨 Building nginx (changed)"
              fi
            fi
          fi
          
          # Output build decisions
          echo "backend-built=$BUILD_BACKEND" >> $GITHUB_OUTPUT
          echo "telegram-built=$BUILD_TELEGRAM" >> $GITHUB_OUTPUT
          echo "ml-api-built=$BUILD_ML_API" >> $GITHUB_OUTPUT
          echo "nginx-built=$BUILD_NGINX" >> $GITHUB_OUTPUT
          
          # Summary
          echo "📋 Build Summary:"
          echo "  Backend: $BUILD_BACKEND"
          echo "  Telegram Bot: $BUILD_TELEGRAM"
          echo "  ML API: $BUILD_ML_API"
          echo "  Nginx: $BUILD_NGINX"

      # Backend Build
      - name: Build and push backend image
        if: steps.build-flags.outputs.backend-built == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            docker.io/fluentlyorg/fluently-backend:latest-develop
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # Telegram Bot Build  
      - name: Build and push telegram-bot image
        if: steps.build-flags.outputs.telegram-built == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./telegram-bot
          file: ./telegram-bot/Dockerfile
          push: true
          tags: |
            docker.io/fluentlyorg/fluently-telegram-bot:latest-develop
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # ML API Build (Most expensive - 15 minutes)
      - name: Build and push ML API image
        if: steps.build-flags.outputs.ml-api-built == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./analysis
          file: ./analysis/distractor_api/Dockerfile
          push: true
          tags: |
            docker.io/fluentlyorg/fluently-ml-api:latest-develop
          cache-from: type=gha
          cache-to: type=gha,mode=min
          platforms: linux/amd64

      # Nginx Build
      - name: Build and push nginx image
        if: steps.build-flags.outputs.nginx-built == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/nginx-container/Dockerfile
          push: true
          tags: |
            docker.io/fluentlyorg/fluently-nginx:latest-develop
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build summary
        run: |
          echo "✅ Build stage completed"
          echo "🔨 Built images:"
          [ "${{ steps.build-flags.outputs.backend-built }}" = "true" ] && echo "  - Backend" || true
          [ "${{ steps.build-flags.outputs.telegram-built }}" = "true" ] && echo "  - Telegram Bot" || true
          [ "${{ steps.build-flags.outputs.ml-api-built }}" = "true" ] && echo "  - ML API" || true
          [ "${{ steps.build-flags.outputs.nginx-built }}" = "true" ] && echo "  - Nginx" || true
          
          # Dry run notification
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo ""
            echo "🧪 DRY RUN MODE: Images built but deployment will be skipped"
            echo "✅ This was a successful dry run - images are ready for deployment"
          fi

  deploy:
    needs: [setup, quality-check, build]
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.environment }}
    if: github.event.inputs.dry_run != 'true' && always() && !failure() && !cancelled()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug values
        run: |
          echo "🔍 Deployment Information:"
          echo "Environment: ${{ needs.setup.outputs.environment }}"
          echo "Domain: ${{ needs.setup.outputs.domain }}"
          echo "Branch: ${{ github.event.inputs.branch || github.ref_name }}"
          echo "Tests Skipped: ${{ github.event.inputs.skip_tests }}"
          echo "Rebuild Containers: ${{ github.event.inputs.rebuild_containers }}"
          echo ""
          if [ "${{ needs.setup.outputs.environment }}" = "production" ]; then
            echo "🚀 Production deployment - using existing images from staging"
            echo "📦 No new images will be built for production"
          else
            echo "🏗️ Staging deployment - images will be built if needed"
          fi

      - name: Deploy to ${{ needs.setup.outputs.environment }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ needs.setup.outputs.environment == 'production' && secrets.DEPLOY_HOST || secrets.STAGING_DEPLOY_HOST }}
          username: ${{ needs.setup.outputs.environment == 'production' && secrets.DEPLOY_USERNAME || secrets.STAGING_DEPLOY_USERNAME }}
          key: ${{ needs.setup.outputs.environment == 'production' && secrets.DEPLOY_SSH_KEY || secrets.STAGING_DEPLOY_SSH_KEY }}
          timeout: 20m
          command_timeout: 20m
          script: |
            set -e
            
            BRANCH="${{ github.event.inputs.branch || github.ref_name }}"
            ENVIRONMENT="${{ needs.setup.outputs.environment }}"
            DOMAIN="${{ needs.setup.outputs.domain }}"
            
            echo "🔄 Starting deployment for $ENVIRONMENT"
            echo "🌐 Domain: $DOMAIN, Branch: $BRANCH"
            
            # Production safety check
            if [ "$ENVIRONMENT" = "production" ]; then
              echo "⚠️  PRODUCTION DEPLOYMENT - Triggered by: ${{ github.actor }}"
              sleep 3
            fi
            
            # Navigate to project directory and set environment variables
            if [ "$ENVIRONMENT" = "production" ]; then
              cd /home/deploy/Fluently-fork
              export ZEROTIER_IP="${{ secrets.ZEROTIER_IP }}"
              BACKUP_DIR="/home/deploy/backups"
            else
              cd /home/deploy-staging/Fluently-fork
              export ZEROTIER_IP="${{ secrets.STAGING_ZEROTIER_IP }}"
              BACKUP_DIR="/home/deploy-staging/backups"
            fi
            
            mkdir -p "$BACKUP_DIR"
            
            # Function to perform health checks
            check_health() {
              echo "🏥 Performing health checks..."
              sleep 10
              
              # Check if backend is healthy
              for i in {1..10}; do
                if curl -f "http://localhost:8070/health" >/dev/null 2>&1; then
                  echo "✅ Backend healthy"
                  break
                elif [ $i -eq 10 ]; then
                  echo "❌ Backend health check failed"
                  return 1
                else
                  sleep 10
                fi
              done
              
              # Check if ML API is healthy (takes 2-3 minutes to initialize)
              for i in {1..20}; do
                if docker compose exec -T ml-api curl -f "http://localhost:8001/health" >/dev/null 2>&1; then
                  echo "✅ ML API healthy"
                  break
                elif [ $i -eq 20 ]; then
                  echo "❌ ML API health check failed"
                  return 1
                else
                  sleep 15
                fi
              done
              
              # Check if LLM API is healthy
              for i in {1..10}; do
                if docker compose exec -T llm-api curl -f "http://localhost:8003/health" >/dev/null 2>&1; then
                  echo "✅ LLM API healthy"
                  break
                elif [ $i -eq 10 ]; then
                  echo "❌ LLM API health check failed"
                  return 1
                else
                  sleep 10
                fi
              done
              
              # Check if Thesaurus API is healthy
              for i in {1..10}; do
                if docker compose exec -T thesaurus-api curl -f "http://localhost:8002/health" -d '{"ping":"test"}' -H "Content-Type: application/json" >/dev/null 2>&1; then
                  echo "✅ Thesaurus API healthy"
                  break
                elif [ $i -eq 10 ]; then
                  echo "❌ Thesaurus API health check failed"
                  return 1
                else
                  sleep 10
                fi
              done
              
              # Check if PostgreSQL is healthy
              if docker compose exec -T postgres pg_isready -U ${DB_USER:-postgres} >/dev/null 2>&1; then
                echo "✅ PostgreSQL healthy"
              else
                echo "❌ PostgreSQL health check failed"
                return 1
              fi
              
              # Check if Redis is healthy
              if docker compose exec -T redis redis-cli ping >/dev/null 2>&1; then
                echo "✅ Redis healthy"
              else
                echo "❌ Redis health check failed"
                return 1
              fi
              
              # Check if nginx is responding
              for i in {1..5}; do
                if curl -f -k "https://localhost" >/dev/null 2>&1; then
                  echo "✅ Nginx healthy"
                  break
                elif [ $i -eq 5 ]; then
                  echo "❌ Nginx health check failed"
                  docker compose ps nginx || true
                  docker compose logs nginx || true
                  return 1
                else
                  sleep 5
                fi
              done
              
              # # Check if Directus is healthy
              # echo "Checking Directus health..."
              # for i in {1..10}; do
              #   if curl -f "http://localhost:8055/server/health" >/dev/null 2>&1; then
              #     echo "✅ Directus is healthy"
              #     break
              #   elif [ $i -eq 10 ]; then
              #     echo "❌ Directus health check failed after 10 attempts"
              #     return 1
              #   else
              #     echo "⏳ Waiting for Directus... (attempt $i/10)"
              #     sleep 10
              #   fi
              # done
              
              # # Check if Prometheus is healthy
              # echo "Checking Prometheus health..."
              # for i in {1..5}; do
              #   if curl -f "http://localhost:9090/-/healthy" >/dev/null 2>&1; then
              #     echo "✅ Prometheus is healthy"
              #     break
              #   elif [ $i -eq 5 ]; then
              #     echo "❌ Prometheus health check failed after 5 attempts"
              #     return 1
              #   else
              #     echo "⏳ Waiting for Prometheus... (attempt $i/5)"
              #     sleep 10
              #   fi
              # done
              
              # # Check if Grafana is healthy
              # echo "Checking Grafana health..."
              # for i in {1..10}; do
              #   if curl -f "http://localhost:3000/api/health" >/dev/null 2>&1; then
              #     echo "✅ Grafana is healthy"
              #     break
              #   elif [ $i -eq 10 ]; then
              #     echo "❌ Grafana health check failed after 10 attempts"
              #     return 1
              #   else
              #     echo "⏳ Waiting for Grafana... (attempt $i/10)"
              #     sleep 10
              #   fi
              # done
              
              # # Check if Loki is healthy
              # echo "Checking Loki health..."
              # for i in {1..5}; do
              #   if curl -f "http://localhost:3100/ready" >/dev/null 2>&1; then
              #     echo "✅ Loki is healthy"
              #     break
              #   elif [ $i -eq 5 ]; then
              #     echo "❌ Loki health check failed after 5 attempts"
              #     return 1
              #   else
              #     echo "⏳ Waiting for Loki... (attempt $i/5)"
              #     sleep 10
              #   fi
              # done
              
              # # Check if Node Exporter is healthy
              # echo "Checking Node Exporter health..."
              # if curl -f "http://localhost:9100/metrics" >/dev/null 2>&1; then
              #   echo "✅ Node Exporter is healthy"
              # else
              #   echo "❌ Node Exporter health check failed"
              #   return 1
              # fi
              
              # # Check if Nginx Exporter is healthy
              # echo "Checking Nginx Exporter health..."
              # if curl -f "http://localhost:9113/metrics" >/dev/null 2>&1; then
              #   echo "✅ Nginx Exporter is healthy"
              # else
              #   echo "❌ Nginx Exporter health check failed"
              #   return 1
              # fi
              
              # # Check if cAdvisor is healthy
              # echo "Checking cAdvisor health..."
              # if curl -f "http://localhost:8044/healthz" >/dev/null 2>&1; then
              #   echo "✅ cAdvisor is healthy"
              # else
              #   echo "❌ cAdvisor health check failed"
              #   return 1
              # fi
              
              # Check if telegram bot is healthy
              for i in {1..3}; do
                if docker compose ps telegram-bot | grep -q "Up"; then
                  echo "✅ Telegram bot running"
                  if docker compose logs telegram-bot | grep -q "telegram: Not Found (404)"; then
                    echo "❌ Telegram bot has invalid token"
                    docker compose logs --tail=10 telegram-bot || true
                    return 1
                  fi
                  break
                elif [ $i -eq 3 ]; then
                  echo "❌ Telegram bot health check failed"
                  docker compose logs --tail=10 telegram-bot || true
                  return 1
                else
                  sleep 5
                fi
              done
              
              # Check if Promtail is healthy
              if docker compose ps promtail | grep -q "Up"; then
                echo "✅ Promtail running"
              else
                echo "❌ Promtail health check failed"
                return 1
              fi
              
              echo "🎉 All health checks passed!"
              return 0
            }
            
            # Function to rollback
            rollback() {
              echo "🔄 Rolling back..."
              
              LATEST_BACKUP=$(ls -t "$BACKUP_DIR"/fluently-backup-*.tar.gz 2>/dev/null | head -1)
              
              if [ -z "$LATEST_BACKUP" ]; then
                echo "❌ No backup found!"
                return 1
              fi
              
              echo "📦 Found backup: $LATEST_BACKUP"
              
              docker compose down --remove-orphans || true
              
              # Force remove any conflicting containers
              docker rm -f fluently_backend fluently_nginx fluently_postgres fluently_redis 2>/dev/null || true
              docker rm -f fluently_ml_api fluently_llm_api fluently_thesaurus_api 2>/dev/null || true
              docker rm -f fluently_telegram-bot fluently_directus 2>/dev/null || true
              docker rm -f fluently_prometheus fluently_grafana fluently_loki fluently_promtail 2>/dev/null || true
              docker rm -f fluently_node_exporter fluently_nginx_exporter fluently_cadvisor 2>/dev/null || true
              
              # Create rollback backup of current state
              ROLLBACK_BACKUP="$BACKUP_DIR/fluently-rollback-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
              tar -czf "$ROLLBACK_BACKUP" --exclude=node_modules --exclude=.git . || echo "⚠️ Rollback backup failed"
              
              # Restore from backup
              tar -xzf "$LATEST_BACKUP" --exclude=node_modules --exclude=.git .
              
              # Start services
              docker compose up -d --force-recreate
              
              # Verify rollback
              if check_health; then
                echo "✅ Rollback completed successfully!"
                return 0
              else
                echo "❌ Rollback failed health checks!"
                return 1
              fi
            }
            
            # Handle rollback request
            if [ "$IS_ROLLBACK" = "true" ]; then
              rollback
              exit $?
            fi
            
            # Backup current state (only for production)
            if [ "$ENVIRONMENT" = "production" ]; then
              echo "📦 Creating backup..."
              BACKUP_FILE="$BACKUP_DIR/fluently-backup-$(date +%Y%m%d-%H%M%S).tar.gz"
              tar -czf "$BACKUP_FILE" --exclude=node_modules --exclude=.git . || echo "⚠️ Backup failed"
              ls -t "$BACKUP_DIR"/fluently-backup-*.tar.gz 2>/dev/null | tail -n +6 | xargs rm -f 2>/dev/null || true
            fi
            
            CURRENT_STATE_BACKUP="$BACKUP_DIR/fluently-current-state-$(date +%Y%m%d-%H%M%S).tar.gz"
            tar -czf "$CURRENT_STATE_BACKUP" --exclude=node_modules --exclude=.git . || echo "⚠️ Current state backup failed"
            
            echo "📥 Updating code..."
            git config --global --add safe.directory $(pwd)
            git restore .
            git fetch origin
            git checkout $BRANCH
            git pull origin $BRANCH

            echo "⚙️ Updating environment configuration..."

            if [ ! -f ".env" ]; then
              touch .env
            fi

            if grep -q "ZEROTIER_IP=" .env; then
              sed -i "s/ZEROTIER_IP=.*/ZEROTIER_IP=$ZEROTIER_IP/" .env
            else
              echo "ZEROTIER_IP=$ZEROTIER_IP" >> .env
            fi

            if grep -q "PUBLIC_URL=" .env; then
              sed -i "s|PUBLIC_URL=.*|PUBLIC_URL=https://$DOMAIN|g" .env
            else
              echo "PUBLIC_URL=https://$DOMAIN" >> .env
            fi

            if [ "$ENVIRONMENT" = "production" ]; then
              export SWAGGER_HOST="${{ secrets.ZEROTIER_IP }}:8070"
            else
              export SWAGGER_HOST="${{ secrets.STAGING_ZEROTIER_IP }}:8070"
            fi
            
            echo "SWAGGER_HOST=$SWAGGER_HOST" >> .env
            
            if [ "$ENVIRONMENT" = "production" ]; then
              BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN }}"
              WEBHOOK_SECRET="${{ secrets.WEBHOOK_SECRET }}"
            else
              BOT_TOKEN="${{ secrets.STAGING_TELEGRAM_BOT_TOKEN }}"
              WEBHOOK_SECRET="${{ secrets.STAGING_WEBHOOK_SECRET }}"
            fi
            
            if [ -z "$BOT_TOKEN" ]; then
              echo "⚠️ BOT_TOKEN is empty for $ENVIRONMENT"
            fi
            
            if [ -z "$WEBHOOK_SECRET" ]; then
              echo "⚠️ WEBHOOK_SECRET is empty for $ENVIRONMENT"
            fi
            
            if [ ! -z "$BOT_TOKEN" ]; then
              if grep -q "BOT_TOKEN=" .env; then
                sed -i "s/BOT_TOKEN=.*/BOT_TOKEN=$BOT_TOKEN/" .env
              else
                echo "BOT_TOKEN=$BOT_TOKEN" >> .env
              fi
            fi
            
            if [ ! -z "$WEBHOOK_SECRET" ]; then
              if grep -q "WEBHOOK_SECRET=" .env; then
                sed -i "s/WEBHOOK_SECRET=.*/WEBHOOK_SECRET=$WEBHOOK_SECRET/" .env
              else
                echo "WEBHOOK_SECRET=$WEBHOOK_SECRET" >> .env
              fi
            fi
            
            if grep -q "WEBHOOK_URL=" .env; then
              sed -i "s|WEBHOOK_URL=.*|WEBHOOK_URL=https://$DOMAIN/webhook|g" .env
            else
              echo "WEBHOOK_URL=https://$DOMAIN/webhook" >> .env
            fi
            
            if grep -q "REDIS_ADDR=" .env; then
              sed -i "s|REDIS_ADDR=.*|REDIS_ADDR=redis:6379|g" .env
            else
              echo "REDIS_ADDR=redis:6379" >> .env
            fi

            GROQ_API_KEYS="${{ secrets.GROQ_API_KEYS }}"
            if [ ! -z "$GROQ_API_KEYS" ]; then
              if grep -q "GROQ_API_KEYS=" .env; then
                sed -i "s/GROQ_API_KEYS=.*/GROQ_API_KEYS=$GROQ_API_KEYS/" .env
              else
                echo "GROQ_API_KEYS=$GROQ_API_KEYS" >> .env
              fi
            else
              echo "⚠️ GROQ_API_KEYS is empty"
            fi
            
            GEMINI_API_KEYS="${{ secrets.GEMINI_API_KEYS }}"
            if [ ! -z "$GEMINI_API_KEYS" ]; then
              if grep -q "GEMINI_API_KEYS=" .env; then
                sed -i "s/GEMINI_API_KEYS=.*/GEMINI_API_KEYS=$GEMINI_API_KEYS/" .env
              else
                echo "GEMINI_API_KEYS=$GEMINI_API_KEYS" >> .env
              fi
            else
              echo "⚠️ GEMINI_API_KEYS is empty"
            fi
            

            

            if [ "$ENVIRONMENT" = "production" ]; then
              export CERT_NAME="fluently-app-ru"
            else
              export CERT_NAME="fluently-app-online"
            fi

            export DOMAIN
            envsubst '${DOMAIN} ${CERT_NAME}' < backend/nginx-container/nginx.conf.template > backend/nginx-container/default.conf

            echo "Generated nginx config for $DOMAIN"
            
            echo "🐳 Pulling latest images and starting containers..."
            
            # Aggressive container cleanup to prevent name conflicts
            echo "🧹 Performing aggressive container cleanup..."
            
            # Stop all containers first
            docker compose down --remove-orphans || true
            
            # Force remove any containers that might be stuck with our service names
            echo "🗑️ Force removing any stuck containers..."
            # Core services
            docker rm -f fluently_backend fluently_nginx fluently_postgres fluently_redis 2>/dev/null || true
            # API services
            docker rm -f fluently_ml_api fluently_llm_api fluently_thesaurus_api 2>/dev/null || true
            # Bot and CMS
            docker rm -f fluently_telegram-bot fluently_directus 2>/dev/null || true
            # Monitoring services
            docker rm -f fluently_prometheus fluently_grafana fluently_loki fluently_promtail 2>/dev/null || true
            # Additional monitoring
            docker rm -f fluently_node_exporter fluently_nginx_exporter fluently_cadvisor 2>/dev/null || true
            
            # Also remove any containers in "created" state that might cause conflicts
            echo "🗑️ Removing containers in 'created' state..."
            docker ps -a --filter "status=created" --format "{{.Names}}" | grep -E "fluently_|fluently-" | xargs -r docker rm -f 2>/dev/null || true
            
            # Clean up any containers that might have similar names
            echo "🗑️ Cleaning up containers with similar names..."
            docker ps -a --format "{{.Names}}" | grep -E "fluently_|fluently-" | xargs -r docker rm -f 2>/dev/null || true
            
            # Clean up Docker networks to prevent conflicts
            echo "🧹 Cleaning up Docker networks..."
            
            # Remove project-specific networks if they exist
            docker network rm fluently-fork_fluently_network 2>/dev/null || true
            docker network rm fluently_network 2>/dev/null || true
            
            # Prune unused networks
            docker network prune -f || true
            
            echo "✅ Container and network cleanup completed"

            # Pull latest images instead of building
            echo "📥 Pulling latest Docker images..."
            docker compose pull
            
            # Final check for any remaining conflicting containers
            echo "🔍 Final check for conflicting containers..."
            CONFLICTING_CONTAINERS=$(docker ps -a --format "{{.Names}}" | grep -E "fluently_|fluently-" || true)
            if [ ! -z "$CONFLICTING_CONTAINERS" ]; then
              echo "⚠️ Found conflicting containers, removing them:"
              echo "$CONFLICTING_CONTAINERS"
              echo "$CONFLICTING_CONTAINERS" | xargs -r docker rm -f 2>/dev/null || true
            else
              echo "✅ No conflicting containers found"
            fi
            
            # Start services with force recreate
            echo "🚀 Starting services..."
            if [ "${{ github.event.inputs.rebuild_containers }}" = "true" ]; then
              echo "🔨 Rebuilding containers during deployment..."
              docker compose up -d --force-recreate --build || {
                echo "❌ Failed to start services with rebuild"
                echo "🔍 Checking for container conflicts..."
                docker ps -a | grep fluently || echo "No fluently containers found"
                echo "🔍 Checking docker compose status..."
                docker compose ps || true
                exit 1
              }
            else
              docker compose up -d --force-recreate || {
                echo "❌ Failed to start services"
                echo "🔍 Checking for container conflicts..."
                docker ps -a | grep fluently || echo "No fluently containers found"
                echo "🔍 Checking docker compose status..."
                docker compose ps || true
                exit 1
              }
            fi

            # Perform health checks
            if check_health; then
              echo "🎉 Deployment completed successfully!"
              echo "🌐 Application available at: https://$DOMAIN"
              echo "🕐 Deployment time: $(date)"
              echo "👤 Deployed by: ${{ github.actor }}"
              echo "🌿 Branch: $BRANCH"
              echo "🏷️  Environment: $ENVIRONMENT"
              
              # Show running containers
              echo ""
              echo "📋 Running containers:"
              docker compose ps
              
              # Show telegram bot setup instructions
              echo ""
              echo "🤖 Telegram Bot Setup Instructions:"
              echo "If the bot token is set correctly, run this command to set up the webhook:"
              echo ""
              echo "curl -X POST \"https://api.telegram.org/bot\$BOT_TOKEN/setWebhook\" \\"
              echo "     -H \"Content-Type: application/json\" \\"
              echo "     -d '{\"url\": \"https://$DOMAIN/webhook\"}'"
              echo ""
              echo "Replace \$BOT_TOKEN with your actual bot token from the GitHub secrets."
              echo "You can test the webhook by sending a message to your bot."
              echo ""
              
              # Enhanced cleanup old images and free up space
              echo "🧹 Performing comprehensive Docker cleanup..."
              
              # Protect critical volumes first
              echo "🔒 Verifying critical volumes are protected..."
              CRITICAL_VOLUMES="fluently_pgdata_safe"
              for vol in $CRITICAL_VOLUMES; do
                if docker volume ls | grep -q "$vol"; then
                  echo "✅ Critical volume protected: $vol"
                else
                  echo "⚠️ Warning: Critical volume not found: $vol"
                fi
              done
              
              # Remove old image versions (keep last 3 versions of each fluently image)
              echo "🗑️ Cleaning up old fluently images (keeping last 3 versions)..."
              docker images --format "{{.Repository}}:{{.Tag}} {{.ID}} {{.CreatedAt}}" | \
                grep "fluentlyorg/fluently-" | \
                sort -k3 -r | \
                tail -n +4 | \
                awk '{print $2}' | \
                xargs -r docker rmi -f 2>/dev/null || true
              
              # Clean up dangling and old unused images
              echo "🗑️ Cleaning up dangling images..."
              docker image prune -f || true
              
              echo "🗑️ Cleaning up images older than 72 hours (not in use)..."
              docker image prune -a --filter "until=72h" -f || true
              
              # Clean up build cache to free space
              echo "🗑️ Cleaning up Docker build cache..."
              docker builder prune -f || true
              
              # Clean up unused networks (safe - only removes unattached networks)
              echo "🗑️ Cleaning up unused networks..."
              docker network prune -f || true
              
              # Clean up stopped containers (safe - only removes stopped containers)
              echo "🗑️ Cleaning up stopped containers..."
              docker container prune -f || true
              
              # INTENTIONALLY SKIP volume prune to protect data
              echo "🔒 Skipping volume cleanup to protect database data"
              
              # Show cleanup results
              echo "📊 Disk space after cleanup:"
              df -h | grep -E "(overlay|docker|/$)" || true
              
              echo "📦 Remaining Docker images:"
              docker images --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}\t{{.CreatedAt}}"
              
              # Cleanup old images (keep last 3)
              echo "✅ Docker cleanup completed safely"
              
              # Remove current state backup since deployment was successful
              rm -f "$CURRENT_STATE_BACKUP" || true
              
            else
              echo "❌ Deployment failed health checks! Starting rollback..."
              
              # Restore from current state backup
              echo "🔄 Restoring previous state..."
              docker compose down --remove-orphans || true
              tar -xzf "$CURRENT_STATE_BACKUP" --exclude=node_modules --exclude=.git . || echo "⚠️ Restore failed"
              docker compose up -d --force-recreate
              
              # Cleanup failed backup
              rm -f "$CURRENT_STATE_BACKUP" || true
              
              echo "❌ Deployment failed and rollback attempted"
              exit 1
            fi

  # ===========================================
  # CLEANUP STAGE - Clean up old Docker Hub images
  # ===========================================
  cleanup:
    name: Clean Up Docker Hub Images
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub for cleanup
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Clean up old Docker Hub images
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          # Function to get Docker Hub token
          get_docker_token() {
            local username=$1
            local password=$2
            local repo=$3
            
            curl -s -H "Content-Type: application/json" \
              -X POST \
              -d "{\"username\": \"$username\", \"password\": \"$password\"}" \
              https://hub.docker.com/v2/users/login/ | jq -r .token
          }
          
          # Function to delete old images from a repository
          cleanup_repo() {
            local repo=$1
            local keep_count=${2:-5}
            
            echo "🧹 Cleaning up repository: $repo"
            
            # Get auth token
            TOKEN=$(get_docker_token "$DOCKERHUB_USERNAME" "$DOCKERHUB_TOKEN" "$repo")
            
            if [ "$TOKEN" = "null" ] || [ -z "$TOKEN" ]; then
              echo "❌ Failed to get Docker Hub token for $repo"
              return 1
            fi
            
            # Get list of tags (we'll focus on latest-develop and older manifests)
            TAGS=$(curl -s -H "Authorization: JWT $TOKEN" \
              "https://hub.docker.com/v2/repositories/$repo/tags/?page_size=100" | \
              jq -r '.results[] | select(.name == "latest-develop") | .digest' | head -1)
            
            if [ -z "$TAGS" ]; then
              echo "ℹ️ No latest-develop tag found in $repo, skipping cleanup"
              return 0
            fi
            
            # Get all manifests for the repository
            MANIFESTS=$(curl -s -H "Authorization: JWT $TOKEN" \
              "https://hub.docker.com/v2/repositories/$repo/tags/?page_size=100" | \
              jq -r '.results[] | .digest' | sort | uniq)
            
            # Count total manifests
            TOTAL_COUNT=$(echo "$MANIFESTS" | wc -l)
            echo "📊 Found $TOTAL_COUNT total manifests in $repo"
            
            if [ "$TOTAL_COUNT" -le "$keep_count" ]; then
              echo "✅ Repository $repo has $TOTAL_COUNT manifests (≤ $keep_count), no cleanup needed"
              return 0
            fi
            
            # Get manifests to delete (all except the most recent ones)
            MANIFESTS_TO_DELETE=$(echo "$MANIFESTS" | head -n -$keep_count)
            DELETE_COUNT=$(echo "$MANIFESTS_TO_DELETE" | wc -l)
            
            echo "🗑️ Will delete $DELETE_COUNT old manifests from $repo, keeping the $keep_count most recent"
            
            # Delete old manifests
            DELETED=0
            for digest in $MANIFESTS_TO_DELETE; do
              if [ -n "$digest" ] && [ "$digest" != "null" ]; then
                echo "🗑️ Deleting manifest: $digest"
                RESPONSE=$(curl -s -X DELETE \
                  -H "Authorization: JWT $TOKEN" \
                  "https://hub.docker.com/v2/repositories/$repo/tags/$digest/")
                
                if [ $? -eq 0 ]; then
                  DELETED=$((DELETED + 1))
                  echo "✅ Deleted manifest $digest"
                else
                  echo "❌ Failed to delete manifest $digest"
                fi
                
                # Rate limiting - be nice to Docker Hub
                sleep 1
              fi
            done
            
            echo "✅ Cleanup completed for $repo: deleted $DELETED manifests"
          }
          
          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq
          
          # Clean up each repository
          echo "🚀 Starting Docker Hub cleanup process..."
          
          cleanup_repo "fluentlyorg/fluently-backend" 2
          cleanup_repo "fluentlyorg/fluently-telegram-bot" 2 
          cleanup_repo "fluentlyorg/fluently-ml-api" 2
          cleanup_repo "fluentlyorg/fluently-nginx" 2
          
          echo "✅ Docker Hub cleanup process completed!"

